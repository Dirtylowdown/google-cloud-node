// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as fs from 'fs';
import * as path from 'path';
const fsp = fs.promises;

const regexMetaInput =
  /let dirToUse = '';\ntry {\n {4}dirToUse = __dirname;\n\}\ncatch \(e\) \{\n {4}\/\/ eslint-disable-next-line @typescript-eslint\/ban-ts-comment\n {4}\/\/ @ts-ignore\n {4}dirToUse = import\.meta\.url;\n\}\nconst filename = \(0, url_1\.fileURLToPath\)\(dirToUse\);\nconst dirname = path_1\.default\.dirname\(filename\);/i;
// eslint-disable-next-line no-useless-escape
const regexJsExtension = /\.js\"/g;
// eslint-disable-next-line no-useless-escape
const regexJsExtensionSingleQuote = /\.js\'/g;
const awaitEsmock = /await esmock/g;
const protosHackregex = /protos-hack/g;
const esmock = /esmock/g;
async function modifyCJSDir(dirNameReadAbsolute) {
  const files = fs.readdirSync(dirNameReadAbsolute);
  for (const file of files) {
    const fileName = file.toString();

    const readName = path.join(dirNameReadAbsolute, fileName);

    if (fs.statSync(readName).isFile()) {
      if (!readName.includes('protos')) {
        let fileContents = await fsp.readFile(readName, 'utf-8');
        if (readName.endsWith('.js')) {
          fileContents = fileContents.replace(
            regexMetaInput,
            'const dirname = __dirname'
          );
          fileContents = fileContents.replace(esmock, 'proxyquire');
          fileContents = fileContents.replace(awaitEsmock, 'proxyquire');
          if (fileName !== 'install.js') {
            fileContents = fileContents.replace(regexJsExtension, '.cjs"');
            fileContents = fileContents.replace(
              regexJsExtensionSingleQuote,
              ".cjs'"
            );
          }
          fileContents = fileContents.replace(protosHackregex, 'protos');
          await fsp.writeFile(readName.replace(/.js$/, '.cjs'), fileContents);
          await fsp.unlink(readName);
        }
      } else {
        await fsp.rename(readName, readName.replace(/\.js$/, '.cjs'));
      }
    } else if (fs.statSync(readName).isDirectory()) {
      modifyCJSDir(readName);
    }
  }
}

modifyCJSDir('./build/cjs');
