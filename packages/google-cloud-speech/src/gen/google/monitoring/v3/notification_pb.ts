// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file google/monitoring/v3/notification.proto (package google.monitoring.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { BoolValue, Message, proto3 } from "@bufbuild/protobuf";
import { LabelDescriptor } from "../../api/label_pb.js";
import { ServiceTier } from "./common_pb.js";
import { LaunchStage } from "../../api/launch_stage_pb.js";
import { MutationRecord } from "./mutation_record_pb.js";

/**
 * A description of a notification channel. The descriptor includes
 * the properties of the channel and the set of labels or fields that
 * must be specified to configure channels of a given type.
 *
 * @generated from message google.monitoring.v3.NotificationChannelDescriptor
 */
export class NotificationChannelDescriptor extends Message<NotificationChannelDescriptor> {
  /**
   * The full REST resource name for this descriptor. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]/notificationChannelDescriptors/[TYPE]
   *
   * In the above, `[TYPE]` is the value of the `type` field.
   *
   * @generated from field: string name = 6;
   */
  name = "";

  /**
   * The type of notification channel, such as "email" and "sms". To view the
   * full list of channels, see
   * [Channel
   * descriptors](https://cloud.google.com/monitoring/alerts/using-channels-api#ncd).
   * Notification channel types are globally unique.
   *
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * A human-readable name for the notification channel type.  This
   * form of the name is suitable for a user interface.
   *
   * @generated from field: string display_name = 2;
   */
  displayName = "";

  /**
   * A human-readable description of the notification channel
   * type. The description may include a description of the properties
   * of the channel and pointers to external documentation.
   *
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * The set of labels that must be defined to identify a particular
   * channel of the corresponding type. Each label includes a
   * description for how that field should be populated.
   *
   * @generated from field: repeated google.api.LabelDescriptor labels = 4;
   */
  labels: LabelDescriptor[] = [];

  /**
   * The tiers that support this notification channel; the project service tier
   * must be one of the supported_tiers.
   *
   * @generated from field: repeated google.monitoring.v3.ServiceTier supported_tiers = 5 [deprecated = true];
   * @deprecated
   */
  supportedTiers: ServiceTier[] = [];

  /**
   * The product launch stage for channels of this type.
   *
   * @generated from field: google.api.LaunchStage launch_stage = 7;
   */
  launchStage = LaunchStage.LAUNCH_STAGE_UNSPECIFIED;

  constructor(data?: PartialMessage<NotificationChannelDescriptor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.monitoring.v3.NotificationChannelDescriptor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 6, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "labels", kind: "message", T: LabelDescriptor, repeated: true },
    { no: 5, name: "supported_tiers", kind: "enum", T: proto3.getEnumType(ServiceTier), repeated: true },
    { no: 7, name: "launch_stage", kind: "enum", T: proto3.getEnumType(LaunchStage) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NotificationChannelDescriptor {
    return new NotificationChannelDescriptor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NotificationChannelDescriptor {
    return new NotificationChannelDescriptor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NotificationChannelDescriptor {
    return new NotificationChannelDescriptor().fromJsonString(jsonString, options);
  }

  static equals(a: NotificationChannelDescriptor | PlainMessage<NotificationChannelDescriptor> | undefined, b: NotificationChannelDescriptor | PlainMessage<NotificationChannelDescriptor> | undefined): boolean {
    return proto3.util.equals(NotificationChannelDescriptor, a, b);
  }
}

/**
 * A `NotificationChannel` is a medium through which an alert is
 * delivered when a policy violation is detected. Examples of channels
 * include email, SMS, and third-party messaging applications. Fields
 * containing sensitive information like authentication tokens or
 * contact info are only partially populated on retrieval.
 *
 * @generated from message google.monitoring.v3.NotificationChannel
 */
export class NotificationChannel extends Message<NotificationChannel> {
  /**
   * The type of the notification channel. This field matches the
   * value of the [NotificationChannelDescriptor.type][google.monitoring.v3.NotificationChannelDescriptor.type] field.
   *
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * The full REST resource name for this channel. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]/notificationChannels/[CHANNEL_ID]
   *
   * The `[CHANNEL_ID]` is automatically assigned by the server on creation.
   *
   * @generated from field: string name = 6;
   */
  name = "";

  /**
   * An optional human-readable name for this notification channel. It is
   * recommended that you specify a non-empty and unique name in order to
   * make it easier to identify the channels in your project, though this is
   * not enforced. The display name is limited to 512 Unicode characters.
   *
   * @generated from field: string display_name = 3;
   */
  displayName = "";

  /**
   * An optional human-readable description of this notification channel. This
   * description may provide additional details, beyond the display
   * name, for the channel. This may not exceed 1024 Unicode characters.
   *
   * @generated from field: string description = 4;
   */
  description = "";

  /**
   * Configuration fields that define the channel and its behavior. The
   * permissible and required labels are specified in the
   * [NotificationChannelDescriptor.labels][google.monitoring.v3.NotificationChannelDescriptor.labels] of the
   * `NotificationChannelDescriptor` corresponding to the `type` field.
   *
   * @generated from field: map<string, string> labels = 5;
   */
  labels: { [key: string]: string } = {};

  /**
   * User-supplied key/value data that does not need to conform to
   * the corresponding `NotificationChannelDescriptor`'s schema, unlike
   * the `labels` field. This field is intended to be used for organizing
   * and identifying the `NotificationChannel` objects.
   *
   * The field can contain up to 64 entries. Each key and value is limited to
   * 63 Unicode characters or 128 bytes, whichever is smaller. Labels and
   * values can contain only lowercase letters, numerals, underscores, and
   * dashes. Keys must begin with a letter.
   *
   * @generated from field: map<string, string> user_labels = 8;
   */
  userLabels: { [key: string]: string } = {};

  /**
   * Indicates whether this channel has been verified or not. On a
   * [`ListNotificationChannels`][google.monitoring.v3.NotificationChannelService.ListNotificationChannels]
   * or
   * [`GetNotificationChannel`][google.monitoring.v3.NotificationChannelService.GetNotificationChannel]
   * operation, this field is expected to be populated.
   *
   * If the value is `UNVERIFIED`, then it indicates that the channel is
   * non-functioning (it both requires verification and lacks verification);
   * otherwise, it is assumed that the channel works.
   *
   * If the channel is neither `VERIFIED` nor `UNVERIFIED`, it implies that
   * the channel is of a type that does not require verification or that
   * this specific channel has been exempted from verification because it was
   * created prior to verification being required for channels of this type.
   *
   * This field cannot be modified using a standard
   * [`UpdateNotificationChannel`][google.monitoring.v3.NotificationChannelService.UpdateNotificationChannel]
   * operation. To change the value of this field, you must call
   * [`VerifyNotificationChannel`][google.monitoring.v3.NotificationChannelService.VerifyNotificationChannel].
   *
   * @generated from field: google.monitoring.v3.NotificationChannel.VerificationStatus verification_status = 9;
   */
  verificationStatus = NotificationChannel_VerificationStatus.VERIFICATION_STATUS_UNSPECIFIED;

  /**
   * Whether notifications are forwarded to the described channel. This makes
   * it possible to disable delivery of notifications to a particular channel
   * without removing the channel from all alerting policies that reference
   * the channel. This is a more convenient approach when the change is
   * temporary and you want to receive notifications from the same set
   * of alerting policies on the channel at some point in the future.
   *
   * @generated from field: google.protobuf.BoolValue enabled = 11;
   */
  enabled?: boolean;

  /**
   * Record of the creation of this channel.
   *
   * @generated from field: google.monitoring.v3.MutationRecord creation_record = 12;
   */
  creationRecord?: MutationRecord;

  /**
   * Records of the modification of this channel.
   *
   * @generated from field: repeated google.monitoring.v3.MutationRecord mutation_records = 13;
   */
  mutationRecords: MutationRecord[] = [];

  constructor(data?: PartialMessage<NotificationChannel>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.monitoring.v3.NotificationChannel";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "labels", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 8, name: "user_labels", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 9, name: "verification_status", kind: "enum", T: proto3.getEnumType(NotificationChannel_VerificationStatus) },
    { no: 11, name: "enabled", kind: "message", T: BoolValue },
    { no: 12, name: "creation_record", kind: "message", T: MutationRecord },
    { no: 13, name: "mutation_records", kind: "message", T: MutationRecord, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NotificationChannel {
    return new NotificationChannel().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NotificationChannel {
    return new NotificationChannel().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NotificationChannel {
    return new NotificationChannel().fromJsonString(jsonString, options);
  }

  static equals(a: NotificationChannel | PlainMessage<NotificationChannel> | undefined, b: NotificationChannel | PlainMessage<NotificationChannel> | undefined): boolean {
    return proto3.util.equals(NotificationChannel, a, b);
  }
}

/**
 * Indicates whether the channel has been verified or not. It is illegal
 * to specify this field in a
 * [`CreateNotificationChannel`][google.monitoring.v3.NotificationChannelService.CreateNotificationChannel]
 * or an
 * [`UpdateNotificationChannel`][google.monitoring.v3.NotificationChannelService.UpdateNotificationChannel]
 * operation.
 *
 * @generated from enum google.monitoring.v3.NotificationChannel.VerificationStatus
 */
export enum NotificationChannel_VerificationStatus {
  /**
   * Sentinel value used to indicate that the state is unknown, omitted, or
   * is not applicable (as in the case of channels that neither support
   * nor require verification in order to function).
   *
   * @generated from enum value: VERIFICATION_STATUS_UNSPECIFIED = 0;
   */
  VERIFICATION_STATUS_UNSPECIFIED = 0,

  /**
   * The channel has yet to be verified and requires verification to function.
   * Note that this state also applies to the case where the verification
   * process has been initiated by sending a verification code but where
   * the verification code has not been submitted to complete the process.
   *
   * @generated from enum value: UNVERIFIED = 1;
   */
  UNVERIFIED = 1,

  /**
   * It has been proven that notifications can be received on this
   * notification channel and that someone on the project has access
   * to messages that are delivered to that channel.
   *
   * @generated from enum value: VERIFIED = 2;
   */
  VERIFIED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(NotificationChannel_VerificationStatus)
proto3.util.setEnumType(NotificationChannel_VerificationStatus, "google.monitoring.v3.NotificationChannel.VerificationStatus", [
  { no: 0, name: "VERIFICATION_STATUS_UNSPECIFIED" },
  { no: 1, name: "UNVERIFIED" },
  { no: 2, name: "VERIFIED" },
]);

