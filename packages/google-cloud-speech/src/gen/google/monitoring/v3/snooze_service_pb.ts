// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file google/monitoring/v3/snooze_service.proto (package google.monitoring.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { FieldMask, Message, proto3 } from "@bufbuild/protobuf";
import { Snooze } from "./snooze_pb.js";

/**
 * The message definition for creating a `Snooze`. Users must provide the body
 * of the `Snooze` to be created but must omit the `Snooze` field, `name`.
 *
 * @generated from message google.monitoring.v3.CreateSnoozeRequest
 */
export class CreateSnoozeRequest extends Message<CreateSnoozeRequest> {
  /**
   * Required. The
   * [project](https://cloud.google.com/monitoring/api/v3#project_name) in which
   * a `Snooze` should be created. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]
   *
   * @generated from field: string parent = 1;
   */
  parent = "";

  /**
   * Required. The `Snooze` to create. Omit the `name` field, as it will be
   * filled in by the API.
   *
   * @generated from field: google.monitoring.v3.Snooze snooze = 2;
   */
  snooze?: Snooze;

  constructor(data?: PartialMessage<CreateSnoozeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.monitoring.v3.CreateSnoozeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "snooze", kind: "message", T: Snooze },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSnoozeRequest {
    return new CreateSnoozeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSnoozeRequest {
    return new CreateSnoozeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSnoozeRequest {
    return new CreateSnoozeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateSnoozeRequest | PlainMessage<CreateSnoozeRequest> | undefined, b: CreateSnoozeRequest | PlainMessage<CreateSnoozeRequest> | undefined): boolean {
    return proto3.util.equals(CreateSnoozeRequest, a, b);
  }
}

/**
 * The message definition for listing `Snooze`s associated with the given
 * `parent`, satisfying the optional `filter`.
 *
 * @generated from message google.monitoring.v3.ListSnoozesRequest
 */
export class ListSnoozesRequest extends Message<ListSnoozesRequest> {
  /**
   * Required. The
   * [project](https://cloud.google.com/monitoring/api/v3#project_name) whose
   * `Snooze`s should be listed. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]
   *
   * @generated from field: string parent = 1;
   */
  parent = "";

  /**
   * Optional. Optional filter to restrict results to the given criteria. The
   * following fields are supported.
   *
   *   * `interval.start_time`
   *   * `interval.end_time`
   *
   * For example:
   *
   *     ```
   *     interval.start_time > "2022-03-11T00:00:00-08:00" AND
   *         interval.end_time < "2022-03-12T00:00:00-08:00"
   *     ```
   *
   * @generated from field: string filter = 2;
   */
  filter = "";

  /**
   * Optional. The maximum number of results to return for a single query. The
   * server may further constrain the maximum number of results returned in a
   * single page. The value should be in the range [1, 1000]. If the value given
   * is outside this range, the server will decide the number of results to be
   * returned.
   *
   * @generated from field: int32 page_size = 4;
   */
  pageSize = 0;

  /**
   * Optional. The `next_page_token` from a previous call to
   * `ListSnoozesRequest` to get the next page of results.
   *
   * @generated from field: string page_token = 5;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListSnoozesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.monitoring.v3.ListSnoozesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "filter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSnoozesRequest {
    return new ListSnoozesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSnoozesRequest {
    return new ListSnoozesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSnoozesRequest {
    return new ListSnoozesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListSnoozesRequest | PlainMessage<ListSnoozesRequest> | undefined, b: ListSnoozesRequest | PlainMessage<ListSnoozesRequest> | undefined): boolean {
    return proto3.util.equals(ListSnoozesRequest, a, b);
  }
}

/**
 * The results of a successful `ListSnoozes` call, containing the matching
 * `Snooze`s.
 *
 * @generated from message google.monitoring.v3.ListSnoozesResponse
 */
export class ListSnoozesResponse extends Message<ListSnoozesResponse> {
  /**
   * `Snooze`s matching this list call.
   *
   * @generated from field: repeated google.monitoring.v3.Snooze snoozes = 1;
   */
  snoozes: Snooze[] = [];

  /**
   * Page token for repeated calls to `ListSnoozes`, to fetch additional pages
   * of results. If this is empty or missing, there are no more pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListSnoozesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.monitoring.v3.ListSnoozesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "snoozes", kind: "message", T: Snooze, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSnoozesResponse {
    return new ListSnoozesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSnoozesResponse {
    return new ListSnoozesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSnoozesResponse {
    return new ListSnoozesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListSnoozesResponse | PlainMessage<ListSnoozesResponse> | undefined, b: ListSnoozesResponse | PlainMessage<ListSnoozesResponse> | undefined): boolean {
    return proto3.util.equals(ListSnoozesResponse, a, b);
  }
}

/**
 * The message definition for retrieving a `Snooze`. Users must specify the
 * field, `name`, which identifies the `Snooze`.
 *
 * @generated from message google.monitoring.v3.GetSnoozeRequest
 */
export class GetSnoozeRequest extends Message<GetSnoozeRequest> {
  /**
   * Required. The ID of the `Snooze` to retrieve. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]/snoozes/[SNOOZE_ID]
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetSnoozeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.monitoring.v3.GetSnoozeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSnoozeRequest {
    return new GetSnoozeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSnoozeRequest {
    return new GetSnoozeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSnoozeRequest {
    return new GetSnoozeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSnoozeRequest | PlainMessage<GetSnoozeRequest> | undefined, b: GetSnoozeRequest | PlainMessage<GetSnoozeRequest> | undefined): boolean {
    return proto3.util.equals(GetSnoozeRequest, a, b);
  }
}

/**
 * The message definition for updating a `Snooze`. The field, `snooze.name`
 * identifies the `Snooze` to be updated. The remainder of `snooze` gives the
 * content the `Snooze` in question will be assigned.
 *
 * What fields can be updated depends on the start time and end time of the
 * `Snooze`.
 *
 *   * end time is in the past: These `Snooze`s are considered
 *     read-only and cannot be updated.
 *   * start time is in the past and end time is in the future: `display_name`
 *     and `interval.end_time` can be updated.
 *   * start time is in the future: `display_name`, `interval.start_time` and
 *     `interval.end_time` can be updated.
 *
 * @generated from message google.monitoring.v3.UpdateSnoozeRequest
 */
export class UpdateSnoozeRequest extends Message<UpdateSnoozeRequest> {
  /**
   * Required. The `Snooze` to update. Must have the name field present.
   *
   * @generated from field: google.monitoring.v3.Snooze snooze = 1;
   */
  snooze?: Snooze;

  /**
   * Required. The fields to update.
   *
   * For each field listed in `update_mask`:
   *
   *   * If the `Snooze` object supplied in the `UpdateSnoozeRequest` has a
   *     value for that field, the value of the field in the existing `Snooze`
   *     will be set to the value of the field in the supplied `Snooze`.
   *   * If the field does not have a value in the supplied `Snooze`, the field
   *     in the existing `Snooze` is set to its default value.
   *
   * Fields not listed retain their existing value.
   *
   * The following are the field names that are accepted in `update_mask`:
   *
   *   * `display_name`
   *   * `interval.start_time`
   *   * `interval.end_time`
   *
   * That said, the start time and end time of the `Snooze` determines which
   * fields can legally be updated. Before attempting an update, users should
   * consult the documentation for `UpdateSnoozeRequest`, which talks about
   * which fields can be updated.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  constructor(data?: PartialMessage<UpdateSnoozeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.monitoring.v3.UpdateSnoozeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "snooze", kind: "message", T: Snooze },
    { no: 2, name: "update_mask", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSnoozeRequest {
    return new UpdateSnoozeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSnoozeRequest {
    return new UpdateSnoozeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSnoozeRequest {
    return new UpdateSnoozeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateSnoozeRequest | PlainMessage<UpdateSnoozeRequest> | undefined, b: UpdateSnoozeRequest | PlainMessage<UpdateSnoozeRequest> | undefined): boolean {
    return proto3.util.equals(UpdateSnoozeRequest, a, b);
  }
}

