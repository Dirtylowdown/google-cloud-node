// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file google/monitoring/v3/notification_service.proto (package google.monitoring.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { FieldMask, Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { NotificationChannel, NotificationChannelDescriptor } from "./notification_pb.js";

/**
 * The `ListNotificationChannelDescriptors` request.
 *
 * @generated from message google.monitoring.v3.ListNotificationChannelDescriptorsRequest
 */
export class ListNotificationChannelDescriptorsRequest extends Message<ListNotificationChannelDescriptorsRequest> {
  /**
   * Required. The REST resource name of the parent from which to retrieve
   * the notification channel descriptors. The expected syntax is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]
   *
   * Note that this
   * [names](https://cloud.google.com/monitoring/api/v3#project_name) the parent
   * container in which to look for the descriptors; to retrieve a single
   * descriptor by name, use the
   * [GetNotificationChannelDescriptor][google.monitoring.v3.NotificationChannelService.GetNotificationChannelDescriptor]
   * operation, instead.
   *
   * @generated from field: string name = 4;
   */
  name = "";

  /**
   * The maximum number of results to return in a single response. If
   * not set to a positive number, a reasonable value will be chosen by the
   * service.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize = 0;

  /**
   * If non-empty, `page_token` must contain a value returned as the
   * `next_page_token` in a previous response to request the next set
   * of results.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListNotificationChannelDescriptorsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.monitoring.v3.ListNotificationChannelDescriptorsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListNotificationChannelDescriptorsRequest {
    return new ListNotificationChannelDescriptorsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListNotificationChannelDescriptorsRequest {
    return new ListNotificationChannelDescriptorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListNotificationChannelDescriptorsRequest {
    return new ListNotificationChannelDescriptorsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListNotificationChannelDescriptorsRequest | PlainMessage<ListNotificationChannelDescriptorsRequest> | undefined, b: ListNotificationChannelDescriptorsRequest | PlainMessage<ListNotificationChannelDescriptorsRequest> | undefined): boolean {
    return proto3.util.equals(ListNotificationChannelDescriptorsRequest, a, b);
  }
}

/**
 * The `ListNotificationChannelDescriptors` response.
 *
 * @generated from message google.monitoring.v3.ListNotificationChannelDescriptorsResponse
 */
export class ListNotificationChannelDescriptorsResponse extends Message<ListNotificationChannelDescriptorsResponse> {
  /**
   * The monitored resource descriptors supported for the specified
   * project, optionally filtered.
   *
   * @generated from field: repeated google.monitoring.v3.NotificationChannelDescriptor channel_descriptors = 1;
   */
  channelDescriptors: NotificationChannelDescriptor[] = [];

  /**
   * If not empty, indicates that there may be more results that match
   * the request. Use the value in the `page_token` field in a
   * subsequent request to fetch the next set of results. If empty,
   * all results have been returned.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListNotificationChannelDescriptorsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.monitoring.v3.ListNotificationChannelDescriptorsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "channel_descriptors", kind: "message", T: NotificationChannelDescriptor, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListNotificationChannelDescriptorsResponse {
    return new ListNotificationChannelDescriptorsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListNotificationChannelDescriptorsResponse {
    return new ListNotificationChannelDescriptorsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListNotificationChannelDescriptorsResponse {
    return new ListNotificationChannelDescriptorsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListNotificationChannelDescriptorsResponse | PlainMessage<ListNotificationChannelDescriptorsResponse> | undefined, b: ListNotificationChannelDescriptorsResponse | PlainMessage<ListNotificationChannelDescriptorsResponse> | undefined): boolean {
    return proto3.util.equals(ListNotificationChannelDescriptorsResponse, a, b);
  }
}

/**
 * The `GetNotificationChannelDescriptor` response.
 *
 * @generated from message google.monitoring.v3.GetNotificationChannelDescriptorRequest
 */
export class GetNotificationChannelDescriptorRequest extends Message<GetNotificationChannelDescriptorRequest> {
  /**
   * Required. The channel type for which to execute the request. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]/notificationChannelDescriptors/[CHANNEL_TYPE]
   *
   * @generated from field: string name = 3;
   */
  name = "";

  constructor(data?: PartialMessage<GetNotificationChannelDescriptorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.monitoring.v3.GetNotificationChannelDescriptorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNotificationChannelDescriptorRequest {
    return new GetNotificationChannelDescriptorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNotificationChannelDescriptorRequest {
    return new GetNotificationChannelDescriptorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetNotificationChannelDescriptorRequest {
    return new GetNotificationChannelDescriptorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetNotificationChannelDescriptorRequest | PlainMessage<GetNotificationChannelDescriptorRequest> | undefined, b: GetNotificationChannelDescriptorRequest | PlainMessage<GetNotificationChannelDescriptorRequest> | undefined): boolean {
    return proto3.util.equals(GetNotificationChannelDescriptorRequest, a, b);
  }
}

/**
 * The `CreateNotificationChannel` request.
 *
 * @generated from message google.monitoring.v3.CreateNotificationChannelRequest
 */
export class CreateNotificationChannelRequest extends Message<CreateNotificationChannelRequest> {
  /**
   * Required. The [project](https://cloud.google.com/monitoring/api/v3#project_name) on
   * which to execute the request. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]
   *
   * This names the container into which the channel will be
   * written, this does not name the newly created channel. The resulting
   * channel's name will have a normalized version of this field as a prefix,
   * but will add `/notificationChannels/[CHANNEL_ID]` to identify the channel.
   *
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * Required. The definition of the `NotificationChannel` to create.
   *
   * @generated from field: google.monitoring.v3.NotificationChannel notification_channel = 2;
   */
  notificationChannel?: NotificationChannel;

  constructor(data?: PartialMessage<CreateNotificationChannelRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.monitoring.v3.CreateNotificationChannelRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "notification_channel", kind: "message", T: NotificationChannel },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateNotificationChannelRequest {
    return new CreateNotificationChannelRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateNotificationChannelRequest {
    return new CreateNotificationChannelRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateNotificationChannelRequest {
    return new CreateNotificationChannelRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateNotificationChannelRequest | PlainMessage<CreateNotificationChannelRequest> | undefined, b: CreateNotificationChannelRequest | PlainMessage<CreateNotificationChannelRequest> | undefined): boolean {
    return proto3.util.equals(CreateNotificationChannelRequest, a, b);
  }
}

/**
 * The `ListNotificationChannels` request.
 *
 * @generated from message google.monitoring.v3.ListNotificationChannelsRequest
 */
export class ListNotificationChannelsRequest extends Message<ListNotificationChannelsRequest> {
  /**
   * Required. The [project](https://cloud.google.com/monitoring/api/v3#project_name) on
   * which to execute the request. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]
   *
   * This names the container
   * in which to look for the notification channels; it does not name a
   * specific channel. To query a specific channel by REST resource name, use
   * the
   * [`GetNotificationChannel`][google.monitoring.v3.NotificationChannelService.GetNotificationChannel]
   * operation.
   *
   * @generated from field: string name = 5;
   */
  name = "";

  /**
   * If provided, this field specifies the criteria that must be met by
   * notification channels to be included in the response.
   *
   * For more details, see [sorting and
   * filtering](https://cloud.google.com/monitoring/api/v3/sorting-and-filtering).
   *
   * @generated from field: string filter = 6;
   */
  filter = "";

  /**
   * A comma-separated list of fields by which to sort the result. Supports
   * the same set of fields as in `filter`. Entries can be prefixed with
   * a minus sign to sort in descending rather than ascending order.
   *
   * For more details, see [sorting and
   * filtering](https://cloud.google.com/monitoring/api/v3/sorting-and-filtering).
   *
   * @generated from field: string order_by = 7;
   */
  orderBy = "";

  /**
   * The maximum number of results to return in a single response. If
   * not set to a positive number, a reasonable value will be chosen by the
   * service.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize = 0;

  /**
   * If non-empty, `page_token` must contain a value returned as the
   * `next_page_token` in a previous response to request the next set
   * of results.
   *
   * @generated from field: string page_token = 4;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListNotificationChannelsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.monitoring.v3.ListNotificationChannelsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 5, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "filter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "order_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListNotificationChannelsRequest {
    return new ListNotificationChannelsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListNotificationChannelsRequest {
    return new ListNotificationChannelsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListNotificationChannelsRequest {
    return new ListNotificationChannelsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListNotificationChannelsRequest | PlainMessage<ListNotificationChannelsRequest> | undefined, b: ListNotificationChannelsRequest | PlainMessage<ListNotificationChannelsRequest> | undefined): boolean {
    return proto3.util.equals(ListNotificationChannelsRequest, a, b);
  }
}

/**
 * The `ListNotificationChannels` response.
 *
 * @generated from message google.monitoring.v3.ListNotificationChannelsResponse
 */
export class ListNotificationChannelsResponse extends Message<ListNotificationChannelsResponse> {
  /**
   * The notification channels defined for the specified project.
   *
   * @generated from field: repeated google.monitoring.v3.NotificationChannel notification_channels = 3;
   */
  notificationChannels: NotificationChannel[] = [];

  /**
   * If not empty, indicates that there may be more results that match
   * the request. Use the value in the `page_token` field in a
   * subsequent request to fetch the next set of results. If empty,
   * all results have been returned.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  /**
   * The total number of notification channels in all pages. This number is only
   * an estimate, and may change in subsequent pages. https://aip.dev/158
   *
   * @generated from field: int32 total_size = 4;
   */
  totalSize = 0;

  constructor(data?: PartialMessage<ListNotificationChannelsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.monitoring.v3.ListNotificationChannelsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "notification_channels", kind: "message", T: NotificationChannel, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "total_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListNotificationChannelsResponse {
    return new ListNotificationChannelsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListNotificationChannelsResponse {
    return new ListNotificationChannelsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListNotificationChannelsResponse {
    return new ListNotificationChannelsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListNotificationChannelsResponse | PlainMessage<ListNotificationChannelsResponse> | undefined, b: ListNotificationChannelsResponse | PlainMessage<ListNotificationChannelsResponse> | undefined): boolean {
    return proto3.util.equals(ListNotificationChannelsResponse, a, b);
  }
}

/**
 * The `GetNotificationChannel` request.
 *
 * @generated from message google.monitoring.v3.GetNotificationChannelRequest
 */
export class GetNotificationChannelRequest extends Message<GetNotificationChannelRequest> {
  /**
   * Required. The channel for which to execute the request. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]/notificationChannels/[CHANNEL_ID]
   *
   * @generated from field: string name = 3;
   */
  name = "";

  constructor(data?: PartialMessage<GetNotificationChannelRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.monitoring.v3.GetNotificationChannelRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNotificationChannelRequest {
    return new GetNotificationChannelRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNotificationChannelRequest {
    return new GetNotificationChannelRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetNotificationChannelRequest {
    return new GetNotificationChannelRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetNotificationChannelRequest | PlainMessage<GetNotificationChannelRequest> | undefined, b: GetNotificationChannelRequest | PlainMessage<GetNotificationChannelRequest> | undefined): boolean {
    return proto3.util.equals(GetNotificationChannelRequest, a, b);
  }
}

/**
 * The `UpdateNotificationChannel` request.
 *
 * @generated from message google.monitoring.v3.UpdateNotificationChannelRequest
 */
export class UpdateNotificationChannelRequest extends Message<UpdateNotificationChannelRequest> {
  /**
   * The fields to update.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  /**
   * Required. A description of the changes to be applied to the specified
   * notification channel. The description must provide a definition for
   * fields to be updated; the names of these fields should also be
   * included in the `update_mask`.
   *
   * @generated from field: google.monitoring.v3.NotificationChannel notification_channel = 3;
   */
  notificationChannel?: NotificationChannel;

  constructor(data?: PartialMessage<UpdateNotificationChannelRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.monitoring.v3.UpdateNotificationChannelRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "update_mask", kind: "message", T: FieldMask },
    { no: 3, name: "notification_channel", kind: "message", T: NotificationChannel },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateNotificationChannelRequest {
    return new UpdateNotificationChannelRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateNotificationChannelRequest {
    return new UpdateNotificationChannelRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateNotificationChannelRequest {
    return new UpdateNotificationChannelRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateNotificationChannelRequest | PlainMessage<UpdateNotificationChannelRequest> | undefined, b: UpdateNotificationChannelRequest | PlainMessage<UpdateNotificationChannelRequest> | undefined): boolean {
    return proto3.util.equals(UpdateNotificationChannelRequest, a, b);
  }
}

/**
 * The `DeleteNotificationChannel` request.
 *
 * @generated from message google.monitoring.v3.DeleteNotificationChannelRequest
 */
export class DeleteNotificationChannelRequest extends Message<DeleteNotificationChannelRequest> {
  /**
   * Required. The channel for which to execute the request. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]/notificationChannels/[CHANNEL_ID]
   *
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * If true, the notification channel will be deleted regardless of its
   * use in alert policies (the policies will be updated to remove the
   * channel). If false, channels that are still referenced by an existing
   * alerting policy will fail to be deleted in a delete operation.
   *
   * @generated from field: bool force = 5;
   */
  force = false;

  constructor(data?: PartialMessage<DeleteNotificationChannelRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.monitoring.v3.DeleteNotificationChannelRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "force", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteNotificationChannelRequest {
    return new DeleteNotificationChannelRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteNotificationChannelRequest {
    return new DeleteNotificationChannelRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteNotificationChannelRequest {
    return new DeleteNotificationChannelRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteNotificationChannelRequest | PlainMessage<DeleteNotificationChannelRequest> | undefined, b: DeleteNotificationChannelRequest | PlainMessage<DeleteNotificationChannelRequest> | undefined): boolean {
    return proto3.util.equals(DeleteNotificationChannelRequest, a, b);
  }
}

/**
 * The `SendNotificationChannelVerificationCode` request.
 *
 * @generated from message google.monitoring.v3.SendNotificationChannelVerificationCodeRequest
 */
export class SendNotificationChannelVerificationCodeRequest extends Message<SendNotificationChannelVerificationCodeRequest> {
  /**
   * Required. The notification channel to which to send a verification code.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<SendNotificationChannelVerificationCodeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.monitoring.v3.SendNotificationChannelVerificationCodeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendNotificationChannelVerificationCodeRequest {
    return new SendNotificationChannelVerificationCodeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendNotificationChannelVerificationCodeRequest {
    return new SendNotificationChannelVerificationCodeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendNotificationChannelVerificationCodeRequest {
    return new SendNotificationChannelVerificationCodeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SendNotificationChannelVerificationCodeRequest | PlainMessage<SendNotificationChannelVerificationCodeRequest> | undefined, b: SendNotificationChannelVerificationCodeRequest | PlainMessage<SendNotificationChannelVerificationCodeRequest> | undefined): boolean {
    return proto3.util.equals(SendNotificationChannelVerificationCodeRequest, a, b);
  }
}

/**
 * The `GetNotificationChannelVerificationCode` request.
 *
 * @generated from message google.monitoring.v3.GetNotificationChannelVerificationCodeRequest
 */
export class GetNotificationChannelVerificationCodeRequest extends Message<GetNotificationChannelVerificationCodeRequest> {
  /**
   * Required. The notification channel for which a verification code is to be generated
   * and retrieved. This must name a channel that is already verified; if
   * the specified channel is not verified, the request will fail.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * The desired expiration time. If specified, the API will guarantee that
   * the returned code will not be valid after the specified timestamp;
   * however, the API cannot guarantee that the returned code will be
   * valid for at least as long as the requested time (the API puts an upper
   * bound on the amount of time for which a code may be valid). If omitted,
   * a default expiration will be used, which may be less than the max
   * permissible expiration (so specifying an expiration may extend the
   * code's lifetime over omitting an expiration, even though the API does
   * impose an upper limit on the maximum expiration that is permitted).
   *
   * @generated from field: google.protobuf.Timestamp expire_time = 2;
   */
  expireTime?: Timestamp;

  constructor(data?: PartialMessage<GetNotificationChannelVerificationCodeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.monitoring.v3.GetNotificationChannelVerificationCodeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "expire_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNotificationChannelVerificationCodeRequest {
    return new GetNotificationChannelVerificationCodeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNotificationChannelVerificationCodeRequest {
    return new GetNotificationChannelVerificationCodeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetNotificationChannelVerificationCodeRequest {
    return new GetNotificationChannelVerificationCodeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetNotificationChannelVerificationCodeRequest | PlainMessage<GetNotificationChannelVerificationCodeRequest> | undefined, b: GetNotificationChannelVerificationCodeRequest | PlainMessage<GetNotificationChannelVerificationCodeRequest> | undefined): boolean {
    return proto3.util.equals(GetNotificationChannelVerificationCodeRequest, a, b);
  }
}

/**
 * The `GetNotificationChannelVerificationCode` request.
 *
 * @generated from message google.monitoring.v3.GetNotificationChannelVerificationCodeResponse
 */
export class GetNotificationChannelVerificationCodeResponse extends Message<GetNotificationChannelVerificationCodeResponse> {
  /**
   * The verification code, which may be used to verify other channels
   * that have an equivalent identity (i.e. other channels of the same
   * type with the same fingerprint such as other email channels with
   * the same email address or other sms channels with the same number).
   *
   * @generated from field: string code = 1;
   */
  code = "";

  /**
   * The expiration time associated with the code that was returned. If
   * an expiration was provided in the request, this is the minimum of the
   * requested expiration in the request and the max permitted expiration.
   *
   * @generated from field: google.protobuf.Timestamp expire_time = 2;
   */
  expireTime?: Timestamp;

  constructor(data?: PartialMessage<GetNotificationChannelVerificationCodeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.monitoring.v3.GetNotificationChannelVerificationCodeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "expire_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNotificationChannelVerificationCodeResponse {
    return new GetNotificationChannelVerificationCodeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNotificationChannelVerificationCodeResponse {
    return new GetNotificationChannelVerificationCodeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetNotificationChannelVerificationCodeResponse {
    return new GetNotificationChannelVerificationCodeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetNotificationChannelVerificationCodeResponse | PlainMessage<GetNotificationChannelVerificationCodeResponse> | undefined, b: GetNotificationChannelVerificationCodeResponse | PlainMessage<GetNotificationChannelVerificationCodeResponse> | undefined): boolean {
    return proto3.util.equals(GetNotificationChannelVerificationCodeResponse, a, b);
  }
}

/**
 * The `VerifyNotificationChannel` request.
 *
 * @generated from message google.monitoring.v3.VerifyNotificationChannelRequest
 */
export class VerifyNotificationChannelRequest extends Message<VerifyNotificationChannelRequest> {
  /**
   * Required. The notification channel to verify.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Required. The verification code that was delivered to the channel as
   * a result of invoking the `SendNotificationChannelVerificationCode` API
   * method or that was retrieved from a verified channel via
   * `GetNotificationChannelVerificationCode`. For example, one might have
   * "G-123456" or "TKNZGhhd2EyN3I1MnRnMjRv" (in general, one is only
   * guaranteed that the code is valid UTF-8; one should not
   * make any assumptions regarding the structure or format of the code).
   *
   * @generated from field: string code = 2;
   */
  code = "";

  constructor(data?: PartialMessage<VerifyNotificationChannelRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.monitoring.v3.VerifyNotificationChannelRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerifyNotificationChannelRequest {
    return new VerifyNotificationChannelRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerifyNotificationChannelRequest {
    return new VerifyNotificationChannelRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerifyNotificationChannelRequest {
    return new VerifyNotificationChannelRequest().fromJsonString(jsonString, options);
  }

  static equals(a: VerifyNotificationChannelRequest | PlainMessage<VerifyNotificationChannelRequest> | undefined, b: VerifyNotificationChannelRequest | PlainMessage<VerifyNotificationChannelRequest> | undefined): boolean {
    return proto3.util.equals(VerifyNotificationChannelRequest, a, b);
  }
}

