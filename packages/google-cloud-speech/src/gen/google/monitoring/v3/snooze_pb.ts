// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file google/monitoring/v3/snooze.proto (package google.monitoring.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { TimeInterval } from "./common_pb.js";

/**
 * A `Snooze` will prevent any alerts from being opened, and close any that
 * are already open. The `Snooze` will work on alerts that match the
 * criteria defined in the `Snooze`. The `Snooze` will be active from
 * `interval.start_time` through `interval.end_time`.
 *
 * @generated from message google.monitoring.v3.Snooze
 */
export class Snooze extends Message<Snooze> {
  /**
   * Required. The name of the `Snooze`. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]/snoozes/[SNOOZE_ID]
   *
   * The ID of the `Snooze` will be generated by the system.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Required. This defines the criteria for applying the `Snooze`. See
   * `Criteria` for more information.
   *
   * @generated from field: google.monitoring.v3.Snooze.Criteria criteria = 3;
   */
  criteria?: Snooze_Criteria;

  /**
   * Required. The `Snooze` will be active from `interval.start_time` through
   * `interval.end_time`.
   * `interval.start_time` cannot be in the past. There is a 15 second clock
   * skew to account for the time it takes for a request to reach the API from
   * the UI.
   *
   * @generated from field: google.monitoring.v3.TimeInterval interval = 4;
   */
  interval?: TimeInterval;

  /**
   * Required. A display name for the `Snooze`. This can be, at most, 512
   * unicode characters.
   *
   * @generated from field: string display_name = 5;
   */
  displayName = "";

  constructor(data?: PartialMessage<Snooze>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.monitoring.v3.Snooze";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "criteria", kind: "message", T: Snooze_Criteria },
    { no: 4, name: "interval", kind: "message", T: TimeInterval },
    { no: 5, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Snooze {
    return new Snooze().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Snooze {
    return new Snooze().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Snooze {
    return new Snooze().fromJsonString(jsonString, options);
  }

  static equals(a: Snooze | PlainMessage<Snooze> | undefined, b: Snooze | PlainMessage<Snooze> | undefined): boolean {
    return proto3.util.equals(Snooze, a, b);
  }
}

/**
 * Criteria specific to the `AlertPolicy`s that this `Snooze` applies to. The
 * `Snooze` will suppress alerts that come from one of the `AlertPolicy`s
 * whose names are supplied.
 *
 * @generated from message google.monitoring.v3.Snooze.Criteria
 */
export class Snooze_Criteria extends Message<Snooze_Criteria> {
  /**
   * The specific `AlertPolicy` names for the alert that should be snoozed.
   * The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]/alertPolicies/[POLICY_ID]
   *
   * There is a limit of 10 policies per snooze. This limit is checked during
   * snooze creation.
   *
   * @generated from field: repeated string policies = 1;
   */
  policies: string[] = [];

  constructor(data?: PartialMessage<Snooze_Criteria>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.monitoring.v3.Snooze.Criteria";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "policies", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Snooze_Criteria {
    return new Snooze_Criteria().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Snooze_Criteria {
    return new Snooze_Criteria().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Snooze_Criteria {
    return new Snooze_Criteria().fromJsonString(jsonString, options);
  }

  static equals(a: Snooze_Criteria | PlainMessage<Snooze_Criteria> | undefined, b: Snooze_Criteria | PlainMessage<Snooze_Criteria> | undefined): boolean {
    return proto3.util.equals(Snooze_Criteria, a, b);
  }
}

