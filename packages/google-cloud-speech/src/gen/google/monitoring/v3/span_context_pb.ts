// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file google/monitoring/v3/span_context.proto (package google.monitoring.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * The context of a span. This is attached to an
 * [Exemplar][google.api.Distribution.Exemplar]
 * in [Distribution][google.api.Distribution] values during aggregation.
 *
 * It contains the name of a span with format:
 *
 *     projects/[PROJECT_ID_OR_NUMBER]/traces/[TRACE_ID]/spans/[SPAN_ID]
 *
 * @generated from message google.monitoring.v3.SpanContext
 */
export class SpanContext extends Message<SpanContext> {
  /**
   * The resource name of the span. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]/traces/[TRACE_ID]/spans/[SPAN_ID]
   *
   * `[TRACE_ID]` is a unique identifier for a trace within a project;
   * it is a 32-character hexadecimal encoding of a 16-byte array.
   *
   * `[SPAN_ID]` is a unique identifier for a span within a trace; it
   * is a 16-character hexadecimal encoding of an 8-byte array.
   *
   * @generated from field: string span_name = 1;
   */
  spanName = "";

  constructor(data?: PartialMessage<SpanContext>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.monitoring.v3.SpanContext";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "span_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpanContext {
    return new SpanContext().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpanContext {
    return new SpanContext().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpanContext {
    return new SpanContext().fromJsonString(jsonString, options);
  }

  static equals(a: SpanContext | PlainMessage<SpanContext> | undefined, b: SpanContext | PlainMessage<SpanContext> | undefined): boolean {
    return proto3.util.equals(SpanContext, a, b);
  }
}

