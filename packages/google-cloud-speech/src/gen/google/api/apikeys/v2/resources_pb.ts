// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file google/api/apikeys/v2/resources.proto (package google.api.apikeys.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * The representation of a key managed by the API Keys API.
 *
 * @generated from message google.api.apikeys.v2.Key
 */
export class Key extends Message<Key> {
  /**
   * Output only. The resource name of the key.
   * The `name` has the form:
   * `projects/<PROJECT_NUMBER>/locations/global/keys/<KEY_ID>`.
   * For example:
   * `projects/123456867718/locations/global/keys/b7ff1f9f-8275-410a-94dd-3855ee9b5dd2`
   *
   * NOTE: Key is a global resource; hence the only supported value for
   * location is `global`.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Output only. Unique id in UUID4 format.
   *
   * @generated from field: string uid = 5;
   */
  uid = "";

  /**
   * Human-readable display name of this key that you can modify.
   * The maximum length is 63 characters.
   *
   * @generated from field: string display_name = 2;
   */
  displayName = "";

  /**
   * Output only. An encrypted and signed value held by this key.
   * This field can be accessed only through the `GetKeyString` method.
   *
   * @generated from field: string key_string = 3;
   */
  keyString = "";

  /**
   * Output only. A timestamp identifying the time this key was originally
   * created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 4;
   */
  createTime?: Timestamp;

  /**
   * Output only. A timestamp identifying the time this key was last
   * updated.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 6;
   */
  updateTime?: Timestamp;

  /**
   * Output only. A timestamp when this key was deleted. If the resource is not deleted,
   * this must be empty.
   *
   * @generated from field: google.protobuf.Timestamp delete_time = 7;
   */
  deleteTime?: Timestamp;

  /**
   * Annotations is an unstructured key-value map stored with a policy that
   * may be set by external tools to store and retrieve arbitrary metadata.
   * They are not queryable and should be preserved when modifying objects.
   *
   * @generated from field: map<string, string> annotations = 8;
   */
  annotations: { [key: string]: string } = {};

  /**
   * Key restrictions.
   *
   * @generated from field: google.api.apikeys.v2.Restrictions restrictions = 9;
   */
  restrictions?: Restrictions;

  /**
   * Output only. A checksum computed by the server based on the current value of the Key
   * resource. This may be sent on update and delete requests to ensure the
   * client has an up-to-date value before proceeding.
   * See https://google.aip.dev/154.
   *
   * @generated from field: string etag = 11;
   */
  etag = "";

  constructor(data?: PartialMessage<Key>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.apikeys.v2.Key";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "uid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "key_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "create_time", kind: "message", T: Timestamp },
    { no: 6, name: "update_time", kind: "message", T: Timestamp },
    { no: 7, name: "delete_time", kind: "message", T: Timestamp },
    { no: 8, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 9, name: "restrictions", kind: "message", T: Restrictions },
    { no: 11, name: "etag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Key {
    return new Key().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Key {
    return new Key().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Key {
    return new Key().fromJsonString(jsonString, options);
  }

  static equals(a: Key | PlainMessage<Key> | undefined, b: Key | PlainMessage<Key> | undefined): boolean {
    return proto3.util.equals(Key, a, b);
  }
}

/**
 * Describes the restrictions on the key.
 *
 * @generated from message google.api.apikeys.v2.Restrictions
 */
export class Restrictions extends Message<Restrictions> {
  /**
   * The websites, IP addresses, Android apps, or iOS apps (the clients) that
   * are allowed to use the key. You can specify only one type of client
   * restrictions per key.
   *
   * @generated from oneof google.api.apikeys.v2.Restrictions.client_restrictions
   */
  clientRestrictions: {
    /**
     * The HTTP referrers (websites) that are allowed to use the key.
     *
     * @generated from field: google.api.apikeys.v2.BrowserKeyRestrictions browser_key_restrictions = 1;
     */
    value: BrowserKeyRestrictions;
    case: "browserKeyRestrictions";
  } | {
    /**
     * The IP addresses of callers that are allowed to use the key.
     *
     * @generated from field: google.api.apikeys.v2.ServerKeyRestrictions server_key_restrictions = 2;
     */
    value: ServerKeyRestrictions;
    case: "serverKeyRestrictions";
  } | {
    /**
     * The Android apps that are allowed to use the key.
     *
     * @generated from field: google.api.apikeys.v2.AndroidKeyRestrictions android_key_restrictions = 3;
     */
    value: AndroidKeyRestrictions;
    case: "androidKeyRestrictions";
  } | {
    /**
     * The iOS apps that are allowed to use the key.
     *
     * @generated from field: google.api.apikeys.v2.IosKeyRestrictions ios_key_restrictions = 4;
     */
    value: IosKeyRestrictions;
    case: "iosKeyRestrictions";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * A restriction for a specific service and optionally one or
   * more specific methods. Requests are allowed if they
   * match any of these restrictions. If no restrictions are
   * specified, all targets are allowed.
   *
   * @generated from field: repeated google.api.apikeys.v2.ApiTarget api_targets = 5;
   */
  apiTargets: ApiTarget[] = [];

  constructor(data?: PartialMessage<Restrictions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.apikeys.v2.Restrictions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "browser_key_restrictions", kind: "message", T: BrowserKeyRestrictions, oneof: "client_restrictions" },
    { no: 2, name: "server_key_restrictions", kind: "message", T: ServerKeyRestrictions, oneof: "client_restrictions" },
    { no: 3, name: "android_key_restrictions", kind: "message", T: AndroidKeyRestrictions, oneof: "client_restrictions" },
    { no: 4, name: "ios_key_restrictions", kind: "message", T: IosKeyRestrictions, oneof: "client_restrictions" },
    { no: 5, name: "api_targets", kind: "message", T: ApiTarget, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Restrictions {
    return new Restrictions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Restrictions {
    return new Restrictions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Restrictions {
    return new Restrictions().fromJsonString(jsonString, options);
  }

  static equals(a: Restrictions | PlainMessage<Restrictions> | undefined, b: Restrictions | PlainMessage<Restrictions> | undefined): boolean {
    return proto3.util.equals(Restrictions, a, b);
  }
}

/**
 * The HTTP referrers (websites) that are allowed to use the key.
 *
 * @generated from message google.api.apikeys.v2.BrowserKeyRestrictions
 */
export class BrowserKeyRestrictions extends Message<BrowserKeyRestrictions> {
  /**
   * A list of regular expressions for the referrer URLs that are allowed
   * to make API calls with this key.
   *
   * @generated from field: repeated string allowed_referrers = 1;
   */
  allowedReferrers: string[] = [];

  constructor(data?: PartialMessage<BrowserKeyRestrictions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.apikeys.v2.BrowserKeyRestrictions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "allowed_referrers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BrowserKeyRestrictions {
    return new BrowserKeyRestrictions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BrowserKeyRestrictions {
    return new BrowserKeyRestrictions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BrowserKeyRestrictions {
    return new BrowserKeyRestrictions().fromJsonString(jsonString, options);
  }

  static equals(a: BrowserKeyRestrictions | PlainMessage<BrowserKeyRestrictions> | undefined, b: BrowserKeyRestrictions | PlainMessage<BrowserKeyRestrictions> | undefined): boolean {
    return proto3.util.equals(BrowserKeyRestrictions, a, b);
  }
}

/**
 * The IP addresses of callers that are allowed to use the key.
 *
 * @generated from message google.api.apikeys.v2.ServerKeyRestrictions
 */
export class ServerKeyRestrictions extends Message<ServerKeyRestrictions> {
  /**
   * A list of the caller IP addresses that are allowed to make API calls
   * with this key.
   *
   * @generated from field: repeated string allowed_ips = 1;
   */
  allowedIps: string[] = [];

  constructor(data?: PartialMessage<ServerKeyRestrictions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.apikeys.v2.ServerKeyRestrictions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "allowed_ips", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerKeyRestrictions {
    return new ServerKeyRestrictions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerKeyRestrictions {
    return new ServerKeyRestrictions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerKeyRestrictions {
    return new ServerKeyRestrictions().fromJsonString(jsonString, options);
  }

  static equals(a: ServerKeyRestrictions | PlainMessage<ServerKeyRestrictions> | undefined, b: ServerKeyRestrictions | PlainMessage<ServerKeyRestrictions> | undefined): boolean {
    return proto3.util.equals(ServerKeyRestrictions, a, b);
  }
}

/**
 * The Android apps that are allowed to use the key.
 *
 * @generated from message google.api.apikeys.v2.AndroidKeyRestrictions
 */
export class AndroidKeyRestrictions extends Message<AndroidKeyRestrictions> {
  /**
   * A list of Android applications that are allowed to make API calls with
   * this key.
   *
   * @generated from field: repeated google.api.apikeys.v2.AndroidApplication allowed_applications = 1;
   */
  allowedApplications: AndroidApplication[] = [];

  constructor(data?: PartialMessage<AndroidKeyRestrictions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.apikeys.v2.AndroidKeyRestrictions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "allowed_applications", kind: "message", T: AndroidApplication, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AndroidKeyRestrictions {
    return new AndroidKeyRestrictions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AndroidKeyRestrictions {
    return new AndroidKeyRestrictions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AndroidKeyRestrictions {
    return new AndroidKeyRestrictions().fromJsonString(jsonString, options);
  }

  static equals(a: AndroidKeyRestrictions | PlainMessage<AndroidKeyRestrictions> | undefined, b: AndroidKeyRestrictions | PlainMessage<AndroidKeyRestrictions> | undefined): boolean {
    return proto3.util.equals(AndroidKeyRestrictions, a, b);
  }
}

/**
 * Identifier of an Android application for key use.
 *
 * @generated from message google.api.apikeys.v2.AndroidApplication
 */
export class AndroidApplication extends Message<AndroidApplication> {
  /**
   * The SHA1 fingerprint of the application. For example, both sha1 formats are
   * acceptable : DA:39:A3:EE:5E:6B:4B:0D:32:55:BF:EF:95:60:18:90:AF:D8:07:09 or
   * DA39A3EE5E6B4B0D3255BFEF95601890AFD80709.
   * Output format is the latter.
   *
   * @generated from field: string sha1_fingerprint = 1;
   */
  sha1Fingerprint = "";

  /**
   * The package name of the application.
   *
   * @generated from field: string package_name = 2;
   */
  packageName = "";

  constructor(data?: PartialMessage<AndroidApplication>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.apikeys.v2.AndroidApplication";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sha1_fingerprint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "package_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AndroidApplication {
    return new AndroidApplication().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AndroidApplication {
    return new AndroidApplication().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AndroidApplication {
    return new AndroidApplication().fromJsonString(jsonString, options);
  }

  static equals(a: AndroidApplication | PlainMessage<AndroidApplication> | undefined, b: AndroidApplication | PlainMessage<AndroidApplication> | undefined): boolean {
    return proto3.util.equals(AndroidApplication, a, b);
  }
}

/**
 * The iOS apps that are allowed to use the key.
 *
 * @generated from message google.api.apikeys.v2.IosKeyRestrictions
 */
export class IosKeyRestrictions extends Message<IosKeyRestrictions> {
  /**
   * A list of bundle IDs that are allowed when making API calls with this key.
   *
   * @generated from field: repeated string allowed_bundle_ids = 1;
   */
  allowedBundleIds: string[] = [];

  constructor(data?: PartialMessage<IosKeyRestrictions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.apikeys.v2.IosKeyRestrictions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "allowed_bundle_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IosKeyRestrictions {
    return new IosKeyRestrictions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IosKeyRestrictions {
    return new IosKeyRestrictions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IosKeyRestrictions {
    return new IosKeyRestrictions().fromJsonString(jsonString, options);
  }

  static equals(a: IosKeyRestrictions | PlainMessage<IosKeyRestrictions> | undefined, b: IosKeyRestrictions | PlainMessage<IosKeyRestrictions> | undefined): boolean {
    return proto3.util.equals(IosKeyRestrictions, a, b);
  }
}

/**
 * A restriction for a specific service and optionally one or multiple
 * specific methods. Both fields are case insensitive.
 *
 * @generated from message google.api.apikeys.v2.ApiTarget
 */
export class ApiTarget extends Message<ApiTarget> {
  /**
   * The service for this restriction. It should be the canonical
   * service name, for example: `translate.googleapis.com`.
   * You can use [`gcloud services list`](/sdk/gcloud/reference/services/list)
   * to get a list of services that are enabled in the project.
   *
   * @generated from field: string service = 1;
   */
  service = "";

  /**
   * Optional. List of one or more methods that can be called.
   * If empty, all methods for the service are allowed. A wildcard
   * (*) can be used as the last symbol.
   * Valid examples:
   *   `google.cloud.translate.v2.TranslateService.GetSupportedLanguage`
   *   `TranslateText`
   *   `Get*`
   *   `translate.googleapis.com.Get*`
   *
   * @generated from field: repeated string methods = 2;
   */
  methods: string[] = [];

  constructor(data?: PartialMessage<ApiTarget>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.apikeys.v2.ApiTarget";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "methods", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApiTarget {
    return new ApiTarget().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApiTarget {
    return new ApiTarget().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApiTarget {
    return new ApiTarget().fromJsonString(jsonString, options);
  }

  static equals(a: ApiTarget | PlainMessage<ApiTarget> | undefined, b: ApiTarget | PlainMessage<ApiTarget> | undefined): boolean {
    return proto3.util.equals(ApiTarget, a, b);
  }
}

