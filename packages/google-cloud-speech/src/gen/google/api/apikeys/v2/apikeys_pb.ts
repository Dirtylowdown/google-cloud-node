// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file google/api/apikeys/v2/apikeys.proto (package google.api.apikeys.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { FieldMask, Message, proto3 } from "@bufbuild/protobuf";
import { Key } from "./resources_pb.js";

/**
 * Request message for `CreateKey` method.
 *
 * @generated from message google.api.apikeys.v2.CreateKeyRequest
 */
export class CreateKeyRequest extends Message<CreateKeyRequest> {
  /**
   * Required. The project in which the API key is created.
   *
   * @generated from field: string parent = 1;
   */
  parent = "";

  /**
   * Required. The API key fields to set at creation time.
   * You can configure only the `display_name`, `restrictions`, and
   * `annotations` fields.
   *
   * @generated from field: google.api.apikeys.v2.Key key = 2;
   */
  key?: Key;

  /**
   * User specified key id (optional). If specified, it will become the final
   * component of the key resource name.
   *
   * The id must be unique within the project, must conform with RFC-1034,
   * is restricted to lower-cased letters, and has a maximum length of 63
   * characters. In another word, the id must match the regular
   * expression: `[a-z]([a-z0-9-]{0,61}[a-z0-9])?`.
   *
   * The id must NOT be a UUID-like string.
   *
   * @generated from field: string key_id = 3;
   */
  keyId = "";

  constructor(data?: PartialMessage<CreateKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.apikeys.v2.CreateKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "message", T: Key },
    { no: 3, name: "key_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateKeyRequest {
    return new CreateKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateKeyRequest {
    return new CreateKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateKeyRequest {
    return new CreateKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateKeyRequest | PlainMessage<CreateKeyRequest> | undefined, b: CreateKeyRequest | PlainMessage<CreateKeyRequest> | undefined): boolean {
    return proto3.util.equals(CreateKeyRequest, a, b);
  }
}

/**
 * Request message for `ListKeys` method.
 *
 * @generated from message google.api.apikeys.v2.ListKeysRequest
 */
export class ListKeysRequest extends Message<ListKeysRequest> {
  /**
   * Required. Lists all API keys associated with this project.
   *
   * @generated from field: string parent = 1;
   */
  parent = "";

  /**
   * Optional. Specifies the maximum number of results to be returned at a time.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize = 0;

  /**
   * Optional. Requests a specific page of results.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  /**
   * Optional. Indicate that keys deleted in the past 30 days should also be
   * returned.
   *
   * @generated from field: bool show_deleted = 6;
   */
  showDeleted = false;

  constructor(data?: PartialMessage<ListKeysRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.apikeys.v2.ListKeysRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "show_deleted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListKeysRequest {
    return new ListKeysRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListKeysRequest {
    return new ListKeysRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListKeysRequest {
    return new ListKeysRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListKeysRequest | PlainMessage<ListKeysRequest> | undefined, b: ListKeysRequest | PlainMessage<ListKeysRequest> | undefined): boolean {
    return proto3.util.equals(ListKeysRequest, a, b);
  }
}

/**
 * Response message for `ListKeys` method.
 *
 * @generated from message google.api.apikeys.v2.ListKeysResponse
 */
export class ListKeysResponse extends Message<ListKeysResponse> {
  /**
   * A list of API keys.
   *
   * @generated from field: repeated google.api.apikeys.v2.Key keys = 1;
   */
  keys: Key[] = [];

  /**
   * The pagination token for the next page of results.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListKeysResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.apikeys.v2.ListKeysResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "keys", kind: "message", T: Key, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListKeysResponse {
    return new ListKeysResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListKeysResponse {
    return new ListKeysResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListKeysResponse {
    return new ListKeysResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListKeysResponse | PlainMessage<ListKeysResponse> | undefined, b: ListKeysResponse | PlainMessage<ListKeysResponse> | undefined): boolean {
    return proto3.util.equals(ListKeysResponse, a, b);
  }
}

/**
 * Request message for `GetKey` method.
 *
 * @generated from message google.api.apikeys.v2.GetKeyRequest
 */
export class GetKeyRequest extends Message<GetKeyRequest> {
  /**
   * Required. The resource name of the API key to get.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.apikeys.v2.GetKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetKeyRequest {
    return new GetKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetKeyRequest {
    return new GetKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetKeyRequest {
    return new GetKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetKeyRequest | PlainMessage<GetKeyRequest> | undefined, b: GetKeyRequest | PlainMessage<GetKeyRequest> | undefined): boolean {
    return proto3.util.equals(GetKeyRequest, a, b);
  }
}

/**
 * Request message for `GetKeyString` method.
 *
 * @generated from message google.api.apikeys.v2.GetKeyStringRequest
 */
export class GetKeyStringRequest extends Message<GetKeyStringRequest> {
  /**
   * Required. The resource name of the API key to be retrieved.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetKeyStringRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.apikeys.v2.GetKeyStringRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetKeyStringRequest {
    return new GetKeyStringRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetKeyStringRequest {
    return new GetKeyStringRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetKeyStringRequest {
    return new GetKeyStringRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetKeyStringRequest | PlainMessage<GetKeyStringRequest> | undefined, b: GetKeyStringRequest | PlainMessage<GetKeyStringRequest> | undefined): boolean {
    return proto3.util.equals(GetKeyStringRequest, a, b);
  }
}

/**
 * Response message for `GetKeyString` method.
 *
 * @generated from message google.api.apikeys.v2.GetKeyStringResponse
 */
export class GetKeyStringResponse extends Message<GetKeyStringResponse> {
  /**
   * An encrypted and signed value of the key.
   *
   * @generated from field: string key_string = 1;
   */
  keyString = "";

  constructor(data?: PartialMessage<GetKeyStringResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.apikeys.v2.GetKeyStringResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetKeyStringResponse {
    return new GetKeyStringResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetKeyStringResponse {
    return new GetKeyStringResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetKeyStringResponse {
    return new GetKeyStringResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetKeyStringResponse | PlainMessage<GetKeyStringResponse> | undefined, b: GetKeyStringResponse | PlainMessage<GetKeyStringResponse> | undefined): boolean {
    return proto3.util.equals(GetKeyStringResponse, a, b);
  }
}

/**
 * Request message for `UpdateKey` method.
 *
 * @generated from message google.api.apikeys.v2.UpdateKeyRequest
 */
export class UpdateKeyRequest extends Message<UpdateKeyRequest> {
  /**
   * Required. Set the `name` field to the resource name of the API key to be
   * updated. You can update only the `display_name`, `restrictions`, and
   * `annotations` fields.
   *
   * @generated from field: google.api.apikeys.v2.Key key = 1;
   */
  key?: Key;

  /**
   * The field mask specifies which fields to be updated as part of this
   * request. All other fields are ignored.
   * Mutable fields are: `display_name`, `restrictions`, and `annotations`.
   * If an update mask is not provided, the service treats it as an implied mask
   * equivalent to all allowed fields that are set on the wire. If the field
   * mask has a special value "*", the service treats it equivalent to replace
   * all allowed mutable fields.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  constructor(data?: PartialMessage<UpdateKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.apikeys.v2.UpdateKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "message", T: Key },
    { no: 2, name: "update_mask", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateKeyRequest {
    return new UpdateKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateKeyRequest {
    return new UpdateKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateKeyRequest {
    return new UpdateKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateKeyRequest | PlainMessage<UpdateKeyRequest> | undefined, b: UpdateKeyRequest | PlainMessage<UpdateKeyRequest> | undefined): boolean {
    return proto3.util.equals(UpdateKeyRequest, a, b);
  }
}

/**
 * Request message for `DeleteKey` method.
 *
 * @generated from message google.api.apikeys.v2.DeleteKeyRequest
 */
export class DeleteKeyRequest extends Message<DeleteKeyRequest> {
  /**
   * Required. The resource name of the API key to be deleted.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Optional. The etag known to the client for the expected state of the key.
   * This is to be used for optimistic concurrency.
   *
   * @generated from field: string etag = 2;
   */
  etag = "";

  constructor(data?: PartialMessage<DeleteKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.apikeys.v2.DeleteKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "etag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteKeyRequest {
    return new DeleteKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteKeyRequest {
    return new DeleteKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteKeyRequest {
    return new DeleteKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteKeyRequest | PlainMessage<DeleteKeyRequest> | undefined, b: DeleteKeyRequest | PlainMessage<DeleteKeyRequest> | undefined): boolean {
    return proto3.util.equals(DeleteKeyRequest, a, b);
  }
}

/**
 * Request message for `UndeleteKey` method.
 *
 * @generated from message google.api.apikeys.v2.UndeleteKeyRequest
 */
export class UndeleteKeyRequest extends Message<UndeleteKeyRequest> {
  /**
   * Required. The resource name of the API key to be undeleted.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<UndeleteKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.apikeys.v2.UndeleteKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UndeleteKeyRequest {
    return new UndeleteKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UndeleteKeyRequest {
    return new UndeleteKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UndeleteKeyRequest {
    return new UndeleteKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UndeleteKeyRequest | PlainMessage<UndeleteKeyRequest> | undefined, b: UndeleteKeyRequest | PlainMessage<UndeleteKeyRequest> | undefined): boolean {
    return proto3.util.equals(UndeleteKeyRequest, a, b);
  }
}

/**
 * Request message for `LookupKey` method.
 *
 * @generated from message google.api.apikeys.v2.LookupKeyRequest
 */
export class LookupKeyRequest extends Message<LookupKeyRequest> {
  /**
   * Required. Finds the project that owns the key string value.
   *
   * @generated from field: string key_string = 1;
   */
  keyString = "";

  constructor(data?: PartialMessage<LookupKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.apikeys.v2.LookupKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LookupKeyRequest {
    return new LookupKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LookupKeyRequest {
    return new LookupKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LookupKeyRequest {
    return new LookupKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LookupKeyRequest | PlainMessage<LookupKeyRequest> | undefined, b: LookupKeyRequest | PlainMessage<LookupKeyRequest> | undefined): boolean {
    return proto3.util.equals(LookupKeyRequest, a, b);
  }
}

/**
 * Response message for `LookupKey` method.
 *
 * @generated from message google.api.apikeys.v2.LookupKeyResponse
 */
export class LookupKeyResponse extends Message<LookupKeyResponse> {
  /**
   * The project that owns the key with the value specified in the request.
   *
   * @generated from field: string parent = 1;
   */
  parent = "";

  /**
   * The resource name of the API key. If the API key has been purged,
   * resource name is empty.
   *
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<LookupKeyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.apikeys.v2.LookupKeyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LookupKeyResponse {
    return new LookupKeyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LookupKeyResponse {
    return new LookupKeyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LookupKeyResponse {
    return new LookupKeyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LookupKeyResponse | PlainMessage<LookupKeyResponse> | undefined, b: LookupKeyResponse | PlainMessage<LookupKeyResponse> | undefined): boolean {
    return proto3.util.equals(LookupKeyResponse, a, b);
  }
}

