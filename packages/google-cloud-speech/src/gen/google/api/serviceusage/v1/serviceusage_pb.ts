// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file google/api/serviceusage/v1/serviceusage.proto (package google.api.serviceusage.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Service } from "./resources_pb.js";

/**
 * Request message for the `EnableService` method.
 *
 * @generated from message google.api.serviceusage.v1.EnableServiceRequest
 */
export class EnableServiceRequest extends Message<EnableServiceRequest> {
  /**
   * Name of the consumer and service to enable the service on.
   *
   * The `EnableService` and `DisableService` methods currently only support
   * projects.
   *
   * Enabling a service requires that the service is public or is shared with
   * the user enabling the service.
   *
   * An example name would be:
   * `projects/123/services/serviceusage.googleapis.com` where `123` is the
   * project number.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<EnableServiceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.serviceusage.v1.EnableServiceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnableServiceRequest {
    return new EnableServiceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnableServiceRequest {
    return new EnableServiceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnableServiceRequest {
    return new EnableServiceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EnableServiceRequest | PlainMessage<EnableServiceRequest> | undefined, b: EnableServiceRequest | PlainMessage<EnableServiceRequest> | undefined): boolean {
    return proto3.util.equals(EnableServiceRequest, a, b);
  }
}

/**
 * Response message for the `EnableService` method.
 * This response message is assigned to the `response` field of the returned
 * Operation when that operation is done.
 *
 * @generated from message google.api.serviceusage.v1.EnableServiceResponse
 */
export class EnableServiceResponse extends Message<EnableServiceResponse> {
  /**
   * The new state of the service after enabling.
   *
   * @generated from field: google.api.serviceusage.v1.Service service = 1;
   */
  service?: Service;

  constructor(data?: PartialMessage<EnableServiceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.serviceusage.v1.EnableServiceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service", kind: "message", T: Service },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnableServiceResponse {
    return new EnableServiceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnableServiceResponse {
    return new EnableServiceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnableServiceResponse {
    return new EnableServiceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: EnableServiceResponse | PlainMessage<EnableServiceResponse> | undefined, b: EnableServiceResponse | PlainMessage<EnableServiceResponse> | undefined): boolean {
    return proto3.util.equals(EnableServiceResponse, a, b);
  }
}

/**
 * Request message for the `DisableService` method.
 *
 * @generated from message google.api.serviceusage.v1.DisableServiceRequest
 */
export class DisableServiceRequest extends Message<DisableServiceRequest> {
  /**
   * Name of the consumer and service to disable the service on.
   *
   * The enable and disable methods currently only support projects.
   *
   * An example name would be:
   * `projects/123/services/serviceusage.googleapis.com` where `123` is the
   * project number.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Indicates if services that are enabled and which depend on this service
   * should also be disabled. If not set, an error will be generated if any
   * enabled services depend on the service to be disabled. When set, the
   * service, and any enabled services that depend on it, will be disabled
   * together.
   *
   * @generated from field: bool disable_dependent_services = 2;
   */
  disableDependentServices = false;

  /**
   * Defines the behavior for checking service usage when disabling a service.
   *
   * @generated from field: google.api.serviceusage.v1.DisableServiceRequest.CheckIfServiceHasUsage check_if_service_has_usage = 3;
   */
  checkIfServiceHasUsage = DisableServiceRequest_CheckIfServiceHasUsage.CHECK_IF_SERVICE_HAS_USAGE_UNSPECIFIED;

  constructor(data?: PartialMessage<DisableServiceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.serviceusage.v1.DisableServiceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "disable_dependent_services", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "check_if_service_has_usage", kind: "enum", T: proto3.getEnumType(DisableServiceRequest_CheckIfServiceHasUsage) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DisableServiceRequest {
    return new DisableServiceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DisableServiceRequest {
    return new DisableServiceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DisableServiceRequest {
    return new DisableServiceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DisableServiceRequest | PlainMessage<DisableServiceRequest> | undefined, b: DisableServiceRequest | PlainMessage<DisableServiceRequest> | undefined): boolean {
    return proto3.util.equals(DisableServiceRequest, a, b);
  }
}

/**
 * Enum to determine if service usage should be checked when disabling a
 * service.
 *
 * @generated from enum google.api.serviceusage.v1.DisableServiceRequest.CheckIfServiceHasUsage
 */
export enum DisableServiceRequest_CheckIfServiceHasUsage {
  /**
   * When unset, the default behavior is used, which is SKIP.
   *
   * @generated from enum value: CHECK_IF_SERVICE_HAS_USAGE_UNSPECIFIED = 0;
   */
  CHECK_IF_SERVICE_HAS_USAGE_UNSPECIFIED = 0,

  /**
   * If set, skip checking service usage when disabling a service.
   *
   * @generated from enum value: SKIP = 1;
   */
  SKIP = 1,

  /**
   * If set, service usage is checked when disabling the service. If a
   * service, or its dependents, has usage in the last 30 days, the request
   * returns a FAILED_PRECONDITION error.
   *
   * @generated from enum value: CHECK = 2;
   */
  CHECK = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(DisableServiceRequest_CheckIfServiceHasUsage)
proto3.util.setEnumType(DisableServiceRequest_CheckIfServiceHasUsage, "google.api.serviceusage.v1.DisableServiceRequest.CheckIfServiceHasUsage", [
  { no: 0, name: "CHECK_IF_SERVICE_HAS_USAGE_UNSPECIFIED" },
  { no: 1, name: "SKIP" },
  { no: 2, name: "CHECK" },
]);

/**
 * Response message for the `DisableService` method.
 * This response message is assigned to the `response` field of the returned
 * Operation when that operation is done.
 *
 * @generated from message google.api.serviceusage.v1.DisableServiceResponse
 */
export class DisableServiceResponse extends Message<DisableServiceResponse> {
  /**
   * The new state of the service after disabling.
   *
   * @generated from field: google.api.serviceusage.v1.Service service = 1;
   */
  service?: Service;

  constructor(data?: PartialMessage<DisableServiceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.serviceusage.v1.DisableServiceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service", kind: "message", T: Service },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DisableServiceResponse {
    return new DisableServiceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DisableServiceResponse {
    return new DisableServiceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DisableServiceResponse {
    return new DisableServiceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DisableServiceResponse | PlainMessage<DisableServiceResponse> | undefined, b: DisableServiceResponse | PlainMessage<DisableServiceResponse> | undefined): boolean {
    return proto3.util.equals(DisableServiceResponse, a, b);
  }
}

/**
 * Request message for the `GetService` method.
 *
 * @generated from message google.api.serviceusage.v1.GetServiceRequest
 */
export class GetServiceRequest extends Message<GetServiceRequest> {
  /**
   * Name of the consumer and service to get the `ConsumerState` for.
   *
   * An example name would be:
   * `projects/123/services/serviceusage.googleapis.com` where `123` is the
   * project number.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetServiceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.serviceusage.v1.GetServiceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetServiceRequest {
    return new GetServiceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetServiceRequest {
    return new GetServiceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetServiceRequest {
    return new GetServiceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetServiceRequest | PlainMessage<GetServiceRequest> | undefined, b: GetServiceRequest | PlainMessage<GetServiceRequest> | undefined): boolean {
    return proto3.util.equals(GetServiceRequest, a, b);
  }
}

/**
 * Request message for the `ListServices` method.
 *
 * @generated from message google.api.serviceusage.v1.ListServicesRequest
 */
export class ListServicesRequest extends Message<ListServicesRequest> {
  /**
   * Parent to search for services on.
   *
   * An example name would be:
   * `projects/123` where `123` is the project number.
   *
   * @generated from field: string parent = 1;
   */
  parent = "";

  /**
   * Requested size of the next page of data.
   * Requested page size cannot exceed 200.
   * If not set, the default page size is 50.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize = 0;

  /**
   * Token identifying which result to start with, which is returned by a
   * previous list call.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  /**
   * Only list services that conform to the given filter.
   * The allowed filter strings are `state:ENABLED` and `state:DISABLED`.
   *
   * @generated from field: string filter = 4;
   */
  filter = "";

  constructor(data?: PartialMessage<ListServicesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.serviceusage.v1.ListServicesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "filter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListServicesRequest {
    return new ListServicesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListServicesRequest {
    return new ListServicesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListServicesRequest {
    return new ListServicesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListServicesRequest | PlainMessage<ListServicesRequest> | undefined, b: ListServicesRequest | PlainMessage<ListServicesRequest> | undefined): boolean {
    return proto3.util.equals(ListServicesRequest, a, b);
  }
}

/**
 * Response message for the `ListServices` method.
 *
 * @generated from message google.api.serviceusage.v1.ListServicesResponse
 */
export class ListServicesResponse extends Message<ListServicesResponse> {
  /**
   * The available services for the requested project.
   *
   * @generated from field: repeated google.api.serviceusage.v1.Service services = 1;
   */
  services: Service[] = [];

  /**
   * Token that can be passed to `ListServices` to resume a paginated
   * query.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListServicesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.serviceusage.v1.ListServicesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "services", kind: "message", T: Service, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListServicesResponse {
    return new ListServicesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListServicesResponse {
    return new ListServicesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListServicesResponse {
    return new ListServicesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListServicesResponse | PlainMessage<ListServicesResponse> | undefined, b: ListServicesResponse | PlainMessage<ListServicesResponse> | undefined): boolean {
    return proto3.util.equals(ListServicesResponse, a, b);
  }
}

/**
 * Request message for the `BatchEnableServices` method.
 *
 * @generated from message google.api.serviceusage.v1.BatchEnableServicesRequest
 */
export class BatchEnableServicesRequest extends Message<BatchEnableServicesRequest> {
  /**
   * Parent to enable services on.
   *
   * An example name would be:
   * `projects/123` where `123` is the project number.
   *
   * The `BatchEnableServices` method currently only supports projects.
   *
   * @generated from field: string parent = 1;
   */
  parent = "";

  /**
   * The identifiers of the services to enable on the project.
   *
   * A valid identifier would be:
   * serviceusage.googleapis.com
   *
   * Enabling services requires that each service is public or is shared with
   * the user enabling the service.
   *
   * A single request can enable a maximum of 20 services at a time. If more
   * than 20 services are specified, the request will fail, and no state changes
   * will occur.
   *
   * @generated from field: repeated string service_ids = 2;
   */
  serviceIds: string[] = [];

  constructor(data?: PartialMessage<BatchEnableServicesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.serviceusage.v1.BatchEnableServicesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "service_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchEnableServicesRequest {
    return new BatchEnableServicesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchEnableServicesRequest {
    return new BatchEnableServicesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchEnableServicesRequest {
    return new BatchEnableServicesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BatchEnableServicesRequest | PlainMessage<BatchEnableServicesRequest> | undefined, b: BatchEnableServicesRequest | PlainMessage<BatchEnableServicesRequest> | undefined): boolean {
    return proto3.util.equals(BatchEnableServicesRequest, a, b);
  }
}

/**
 * Response message for the `BatchEnableServices` method.
 * This response message is assigned to the `response` field of the returned
 * Operation when that operation is done.
 *
 * @generated from message google.api.serviceusage.v1.BatchEnableServicesResponse
 */
export class BatchEnableServicesResponse extends Message<BatchEnableServicesResponse> {
  /**
   * The new state of the services after enabling.
   *
   * @generated from field: repeated google.api.serviceusage.v1.Service services = 1;
   */
  services: Service[] = [];

  /**
   * If allow_partial_success is true, and one or more services could not be
   * enabled, this field contains the details about each failure.
   *
   * @generated from field: repeated google.api.serviceusage.v1.BatchEnableServicesResponse.EnableFailure failures = 2;
   */
  failures: BatchEnableServicesResponse_EnableFailure[] = [];

  constructor(data?: PartialMessage<BatchEnableServicesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.serviceusage.v1.BatchEnableServicesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "services", kind: "message", T: Service, repeated: true },
    { no: 2, name: "failures", kind: "message", T: BatchEnableServicesResponse_EnableFailure, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchEnableServicesResponse {
    return new BatchEnableServicesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchEnableServicesResponse {
    return new BatchEnableServicesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchEnableServicesResponse {
    return new BatchEnableServicesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BatchEnableServicesResponse | PlainMessage<BatchEnableServicesResponse> | undefined, b: BatchEnableServicesResponse | PlainMessage<BatchEnableServicesResponse> | undefined): boolean {
    return proto3.util.equals(BatchEnableServicesResponse, a, b);
  }
}

/**
 * Provides error messages for the failing services.
 *
 * @generated from message google.api.serviceusage.v1.BatchEnableServicesResponse.EnableFailure
 */
export class BatchEnableServicesResponse_EnableFailure extends Message<BatchEnableServicesResponse_EnableFailure> {
  /**
   * The service id of a service that could not be enabled.
   *
   * @generated from field: string service_id = 1;
   */
  serviceId = "";

  /**
   * An error message describing why the service could not be enabled.
   *
   * @generated from field: string error_message = 2;
   */
  errorMessage = "";

  constructor(data?: PartialMessage<BatchEnableServicesResponse_EnableFailure>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.serviceusage.v1.BatchEnableServicesResponse.EnableFailure";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "error_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchEnableServicesResponse_EnableFailure {
    return new BatchEnableServicesResponse_EnableFailure().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchEnableServicesResponse_EnableFailure {
    return new BatchEnableServicesResponse_EnableFailure().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchEnableServicesResponse_EnableFailure {
    return new BatchEnableServicesResponse_EnableFailure().fromJsonString(jsonString, options);
  }

  static equals(a: BatchEnableServicesResponse_EnableFailure | PlainMessage<BatchEnableServicesResponse_EnableFailure> | undefined, b: BatchEnableServicesResponse_EnableFailure | PlainMessage<BatchEnableServicesResponse_EnableFailure> | undefined): boolean {
    return proto3.util.equals(BatchEnableServicesResponse_EnableFailure, a, b);
  }
}

/**
 * Request message for the `BatchGetServices` method.
 *
 * @generated from message google.api.serviceusage.v1.BatchGetServicesRequest
 */
export class BatchGetServicesRequest extends Message<BatchGetServicesRequest> {
  /**
   * Parent to retrieve services from.
   * If this is set, the parent of all of the services specified in `names` must
   * match this field. An example name would be: `projects/123` where `123` is
   * the project number. The `BatchGetServices` method currently only supports
   * projects.
   *
   * @generated from field: string parent = 1;
   */
  parent = "";

  /**
   * Names of the services to retrieve.
   *
   * An example name would be:
   * `projects/123/services/serviceusage.googleapis.com` where `123` is the
   * project number.
   * A single request can get a maximum of 30 services at a time.
   *
   * @generated from field: repeated string names = 2;
   */
  names: string[] = [];

  constructor(data?: PartialMessage<BatchGetServicesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.serviceusage.v1.BatchGetServicesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchGetServicesRequest {
    return new BatchGetServicesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchGetServicesRequest {
    return new BatchGetServicesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchGetServicesRequest {
    return new BatchGetServicesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BatchGetServicesRequest | PlainMessage<BatchGetServicesRequest> | undefined, b: BatchGetServicesRequest | PlainMessage<BatchGetServicesRequest> | undefined): boolean {
    return proto3.util.equals(BatchGetServicesRequest, a, b);
  }
}

/**
 * Response message for the `BatchGetServices` method.
 *
 * @generated from message google.api.serviceusage.v1.BatchGetServicesResponse
 */
export class BatchGetServicesResponse extends Message<BatchGetServicesResponse> {
  /**
   * The requested Service states.
   *
   * @generated from field: repeated google.api.serviceusage.v1.Service services = 1;
   */
  services: Service[] = [];

  constructor(data?: PartialMessage<BatchGetServicesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.serviceusage.v1.BatchGetServicesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "services", kind: "message", T: Service, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchGetServicesResponse {
    return new BatchGetServicesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchGetServicesResponse {
    return new BatchGetServicesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchGetServicesResponse {
    return new BatchGetServicesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BatchGetServicesResponse | PlainMessage<BatchGetServicesResponse> | undefined, b: BatchGetServicesResponse | PlainMessage<BatchGetServicesResponse> | undefined): boolean {
    return proto3.util.equals(BatchGetServicesResponse, a, b);
  }
}

