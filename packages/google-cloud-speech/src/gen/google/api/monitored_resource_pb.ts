// Copyright 2015 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file google/api/monitored_resource.proto (package google.api, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Struct } from "@bufbuild/protobuf";
import { LabelDescriptor } from "./label_pb.js";
import { LaunchStage } from "./launch_stage_pb.js";

/**
 * An object that describes the schema of a [MonitoredResource][google.api.MonitoredResource] object using a
 * type name and a set of labels.  For example, the monitored resource
 * descriptor for Google Compute Engine VM instances has a type of
 * `"gce_instance"` and specifies the use of the labels `"instance_id"` and
 * `"zone"` to identify particular VM instances.
 *
 * Different APIs can support different monitored resource types. APIs generally
 * provide a `list` method that returns the monitored resource descriptors used
 * by the API.
 *
 *
 * @generated from message google.api.MonitoredResourceDescriptor
 */
export class MonitoredResourceDescriptor extends Message<MonitoredResourceDescriptor> {
  /**
   * Optional. The resource name of the monitored resource descriptor:
   * `"projects/{project_id}/monitoredResourceDescriptors/{type}"` where
   * {type} is the value of the `type` field in this object and
   * {project_id} is a project ID that provides API-specific context for
   * accessing the type.  APIs that do not use project information can use the
   * resource name format `"monitoredResourceDescriptors/{type}"`.
   *
   * @generated from field: string name = 5;
   */
  name = "";

  /**
   * Required. The monitored resource type. For example, the type
   * `"cloudsql_database"` represents databases in Google Cloud SQL.
   *  For a list of types, see [Monitoring resource
   *  types](https://cloud.google.com/monitoring/api/resources)
   * and [Logging resource
   * types](https://cloud.google.com/logging/docs/api/v2/resource-list).
   *
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * Optional. A concise name for the monitored resource type that might be
   * displayed in user interfaces. It should be a Title Cased Noun Phrase,
   * without any article or other determiners. For example,
   * `"Google Cloud SQL Database"`.
   *
   * @generated from field: string display_name = 2;
   */
  displayName = "";

  /**
   * Optional. A detailed description of the monitored resource type that might
   * be used in documentation.
   *
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * Required. A set of labels used to describe instances of this monitored
   * resource type. For example, an individual Google Cloud SQL database is
   * identified by values for the labels `"database_id"` and `"zone"`.
   *
   * @generated from field: repeated google.api.LabelDescriptor labels = 4;
   */
  labels: LabelDescriptor[] = [];

  /**
   * Optional. The launch stage of the monitored resource definition.
   *
   * @generated from field: google.api.LaunchStage launch_stage = 7;
   */
  launchStage = LaunchStage.LAUNCH_STAGE_UNSPECIFIED;

  constructor(data?: PartialMessage<MonitoredResourceDescriptor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.MonitoredResourceDescriptor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 5, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "labels", kind: "message", T: LabelDescriptor, repeated: true },
    { no: 7, name: "launch_stage", kind: "enum", T: proto3.getEnumType(LaunchStage) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MonitoredResourceDescriptor {
    return new MonitoredResourceDescriptor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MonitoredResourceDescriptor {
    return new MonitoredResourceDescriptor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MonitoredResourceDescriptor {
    return new MonitoredResourceDescriptor().fromJsonString(jsonString, options);
  }

  static equals(a: MonitoredResourceDescriptor | PlainMessage<MonitoredResourceDescriptor> | undefined, b: MonitoredResourceDescriptor | PlainMessage<MonitoredResourceDescriptor> | undefined): boolean {
    return proto3.util.equals(MonitoredResourceDescriptor, a, b);
  }
}

/**
 * An object representing a resource that can be used for monitoring, logging,
 * billing, or other purposes. Examples include virtual machine instances,
 * databases, and storage devices such as disks. The `type` field identifies a
 * [MonitoredResourceDescriptor][google.api.MonitoredResourceDescriptor] object that describes the resource's
 * schema. Information in the `labels` field identifies the actual resource and
 * its attributes according to the schema. For example, a particular Compute
 * Engine VM instance could be represented by the following object, because the
 * [MonitoredResourceDescriptor][google.api.MonitoredResourceDescriptor] for `"gce_instance"` has labels
 * `"project_id"`, `"instance_id"` and `"zone"`:
 *
 *     { "type": "gce_instance",
 *       "labels": { "project_id": "my-project",
 *                   "instance_id": "12345678901234",
 *                   "zone": "us-central1-a" }}
 *
 * @generated from message google.api.MonitoredResource
 */
export class MonitoredResource extends Message<MonitoredResource> {
  /**
   * Required. The monitored resource type. This field must match
   * the `type` field of a [MonitoredResourceDescriptor][google.api.MonitoredResourceDescriptor] object. For
   * example, the type of a Compute Engine VM instance is `gce_instance`.
   * Some descriptors include the service name in the type; for example,
   * the type of a Datastream stream is `datastream.googleapis.com/Stream`.
   *
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * Required. Values for all of the labels listed in the associated monitored
   * resource descriptor. For example, Compute Engine VM instances use the
   * labels `"project_id"`, `"instance_id"`, and `"zone"`.
   *
   * @generated from field: map<string, string> labels = 2;
   */
  labels: { [key: string]: string } = {};

  constructor(data?: PartialMessage<MonitoredResource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.MonitoredResource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "labels", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MonitoredResource {
    return new MonitoredResource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MonitoredResource {
    return new MonitoredResource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MonitoredResource {
    return new MonitoredResource().fromJsonString(jsonString, options);
  }

  static equals(a: MonitoredResource | PlainMessage<MonitoredResource> | undefined, b: MonitoredResource | PlainMessage<MonitoredResource> | undefined): boolean {
    return proto3.util.equals(MonitoredResource, a, b);
  }
}

/**
 * Auxiliary metadata for a [MonitoredResource][google.api.MonitoredResource] object.
 * [MonitoredResource][google.api.MonitoredResource] objects contain the minimum set of information to
 * uniquely identify a monitored resource instance. There is some other useful
 * auxiliary metadata. Monitoring and Logging use an ingestion
 * pipeline to extract metadata for cloud resources of all types, and store
 * the metadata in this message.
 *
 * @generated from message google.api.MonitoredResourceMetadata
 */
export class MonitoredResourceMetadata extends Message<MonitoredResourceMetadata> {
  /**
   * Output only. Values for predefined system metadata labels.
   * System labels are a kind of metadata extracted by Google, including
   * "machine_image", "vpc", "subnet_id",
   * "security_group", "name", etc.
   * System label values can be only strings, Boolean values, or a list of
   * strings. For example:
   *
   *     { "name": "my-test-instance",
   *       "security_group": ["a", "b", "c"],
   *       "spot_instance": false }
   *
   * @generated from field: google.protobuf.Struct system_labels = 1;
   */
  systemLabels?: Struct;

  /**
   * Output only. A map of user-defined metadata labels.
   *
   * @generated from field: map<string, string> user_labels = 2;
   */
  userLabels: { [key: string]: string } = {};

  constructor(data?: PartialMessage<MonitoredResourceMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.MonitoredResourceMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "system_labels", kind: "message", T: Struct },
    { no: 2, name: "user_labels", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MonitoredResourceMetadata {
    return new MonitoredResourceMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MonitoredResourceMetadata {
    return new MonitoredResourceMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MonitoredResourceMetadata {
    return new MonitoredResourceMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: MonitoredResourceMetadata | PlainMessage<MonitoredResourceMetadata> | undefined, b: MonitoredResourceMetadata | PlainMessage<MonitoredResourceMetadata> | undefined): boolean {
    return proto3.util.equals(MonitoredResourceMetadata, a, b);
  }
}

