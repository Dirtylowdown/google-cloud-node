// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file google/api/servicecontrol/v2/service_controller.proto (package google.api.servicecontrol.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { AttributeContext } from "../../../rpc/context/attribute_context_pb.js";
import { Status } from "../../../rpc/status_pb.js";

/**
 * Request message for the Check method.
 *
 * @generated from message google.api.servicecontrol.v2.CheckRequest
 */
export class CheckRequest extends Message<CheckRequest> {
  /**
   * The service name as specified in its service configuration. For example,
   * `"pubsub.googleapis.com"`.
   *
   * See
   * [google.api.Service](https://cloud.google.com/service-management/reference/rpc/google.api#google.api.Service)
   * for the definition of a service name.
   *
   * @generated from field: string service_name = 1;
   */
  serviceName = "";

  /**
   * Specifies the version of the service configuration that should be used to
   * process the request. Must not be empty. Set this field to 'latest' to
   * specify using the latest configuration.
   *
   * @generated from field: string service_config_id = 2;
   */
  serviceConfigId = "";

  /**
   * Describes attributes about the operation being executed by the service.
   *
   * @generated from field: google.rpc.context.AttributeContext attributes = 3;
   */
  attributes?: AttributeContext;

  /**
   * Describes the resources and the policies applied to each resource.
   *
   * @generated from field: repeated google.api.servicecontrol.v2.ResourceInfo resources = 4;
   */
  resources: ResourceInfo[] = [];

  /**
   * Optional. Contains a comma-separated list of flags.
   *
   * @generated from field: string flags = 5;
   */
  flags = "";

  constructor(data?: PartialMessage<CheckRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.servicecontrol.v2.CheckRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "service_config_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "attributes", kind: "message", T: AttributeContext },
    { no: 4, name: "resources", kind: "message", T: ResourceInfo, repeated: true },
    { no: 5, name: "flags", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckRequest {
    return new CheckRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckRequest {
    return new CheckRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckRequest {
    return new CheckRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CheckRequest | PlainMessage<CheckRequest> | undefined, b: CheckRequest | PlainMessage<CheckRequest> | undefined): boolean {
    return proto3.util.equals(CheckRequest, a, b);
  }
}

/**
 * Describes a resource referenced in the request.
 *
 * @generated from message google.api.servicecontrol.v2.ResourceInfo
 */
export class ResourceInfo extends Message<ResourceInfo> {
  /**
   * The name of the resource referenced in the request.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * The resource type in the format of "{service}/{kind}".
   *
   * @generated from field: string type = 2;
   */
  type = "";

  /**
   * The resource permission needed for this request.
   * The format must be "{service}/{plural}.{verb}".
   *
   * @generated from field: string permission = 3;
   */
  permission = "";

  /**
   * Optional. The identifier of the container of this resource. For Google
   * Cloud APIs, the resource container must be one of the following formats:
   *     - `projects/<project-id or project-number>`
   *     - `folders/<folder-id>`
   *     - `organizations/<organization-id>`
   * For the policy enforcement on the container level (VPCSC and Location
   * Policy check), this field takes precedence on the container extracted from
   * name when presents.
   *
   * @generated from field: string container = 4;
   */
  container = "";

  /**
   * Optional. The location of the resource. The value must be a valid zone,
   * region or multiregion. For example: "europe-west4" or
   * "northamerica-northeast1-a"
   *
   * @generated from field: string location = 5;
   */
  location = "";

  constructor(data?: PartialMessage<ResourceInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.servicecontrol.v2.ResourceInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "permission", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "container", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "location", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResourceInfo {
    return new ResourceInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResourceInfo {
    return new ResourceInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResourceInfo {
    return new ResourceInfo().fromJsonString(jsonString, options);
  }

  static equals(a: ResourceInfo | PlainMessage<ResourceInfo> | undefined, b: ResourceInfo | PlainMessage<ResourceInfo> | undefined): boolean {
    return proto3.util.equals(ResourceInfo, a, b);
  }
}

/**
 * Response message for the Check method.
 *
 * @generated from message google.api.servicecontrol.v2.CheckResponse
 */
export class CheckResponse extends Message<CheckResponse> {
  /**
   * Operation is allowed when this field is not set. Any non-'OK' status
   * indicates a denial; [google.rpc.Status.details][google.rpc.Status.details]
   * would contain additional details about the denial.
   *
   * @generated from field: google.rpc.Status status = 1;
   */
  status?: Status;

  /**
   * Returns a set of request contexts generated from the `CheckRequest`.
   *
   * @generated from field: map<string, string> headers = 2;
   */
  headers: { [key: string]: string } = {};

  constructor(data?: PartialMessage<CheckResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.servicecontrol.v2.CheckResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: Status },
    { no: 2, name: "headers", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckResponse {
    return new CheckResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckResponse {
    return new CheckResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckResponse {
    return new CheckResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CheckResponse | PlainMessage<CheckResponse> | undefined, b: CheckResponse | PlainMessage<CheckResponse> | undefined): boolean {
    return proto3.util.equals(CheckResponse, a, b);
  }
}

/**
 * Request message for the Report method.
 *
 * @generated from message google.api.servicecontrol.v2.ReportRequest
 */
export class ReportRequest extends Message<ReportRequest> {
  /**
   * The service name as specified in its service configuration. For example,
   * `"pubsub.googleapis.com"`.
   *
   * See
   * [google.api.Service](https://cloud.google.com/service-management/reference/rpc/google.api#google.api.Service)
   * for the definition of a service name.
   *
   * @generated from field: string service_name = 1;
   */
  serviceName = "";

  /**
   * Specifies the version of the service configuration that should be used to
   * process the request. Must not be empty. Set this field to 'latest' to
   * specify using the latest configuration.
   *
   * @generated from field: string service_config_id = 2;
   */
  serviceConfigId = "";

  /**
   * Describes the list of operations to be reported. Each operation is
   * represented as an AttributeContext, and contains all attributes around an
   * API access.
   *
   * @generated from field: repeated google.rpc.context.AttributeContext operations = 3;
   */
  operations: AttributeContext[] = [];

  constructor(data?: PartialMessage<ReportRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.servicecontrol.v2.ReportRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "service_config_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "operations", kind: "message", T: AttributeContext, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReportRequest {
    return new ReportRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReportRequest {
    return new ReportRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReportRequest {
    return new ReportRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ReportRequest | PlainMessage<ReportRequest> | undefined, b: ReportRequest | PlainMessage<ReportRequest> | undefined): boolean {
    return proto3.util.equals(ReportRequest, a, b);
  }
}

/**
 * Response message for the Report method.
 * If the request contains any invalid data, the server returns an RPC error.
 *
 * @generated from message google.api.servicecontrol.v2.ReportResponse
 */
export class ReportResponse extends Message<ReportResponse> {
  constructor(data?: PartialMessage<ReportResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.api.servicecontrol.v2.ReportResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReportResponse {
    return new ReportResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReportResponse {
    return new ReportResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReportResponse {
    return new ReportResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ReportResponse | PlainMessage<ReportResponse> | undefined, b: ReportResponse | PlainMessage<ReportResponse> | undefined): boolean {
    return proto3.util.equals(ReportResponse, a, b);
  }
}

