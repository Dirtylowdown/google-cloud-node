// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file google/iam/v1/options.proto (package google.iam.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Encapsulates settings provided to GetIamPolicy.
 *
 * @generated from message google.iam.v1.GetPolicyOptions
 */
export class GetPolicyOptions extends Message<GetPolicyOptions> {
  /**
   * Optional. The maximum policy version that will be used to format the
   * policy.
   *
   * Valid values are 0, 1, and 3. Requests specifying an invalid value will be
   * rejected.
   *
   * Requests for policies with any conditional role bindings must specify
   * version 3. Policies with no conditional role bindings may specify any valid
   * value or leave the field unset.
   *
   * The policy in the response might use the policy version that you specified,
   * or it might use a lower policy version. For example, if you specify version
   * 3, but the policy has no conditional role bindings, the response uses
   * version 1.
   *
   * To learn which resources support conditions in their IAM policies, see the
   * [IAM
   * documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
   *
   * @generated from field: int32 requested_policy_version = 1;
   */
  requestedPolicyVersion = 0;

  constructor(data?: PartialMessage<GetPolicyOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.iam.v1.GetPolicyOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "requested_policy_version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPolicyOptions {
    return new GetPolicyOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPolicyOptions {
    return new GetPolicyOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPolicyOptions {
    return new GetPolicyOptions().fromJsonString(jsonString, options);
  }

  static equals(a: GetPolicyOptions | PlainMessage<GetPolicyOptions> | undefined, b: GetPolicyOptions | PlainMessage<GetPolicyOptions> | undefined): boolean {
    return proto3.util.equals(GetPolicyOptions, a, b);
  }
}

