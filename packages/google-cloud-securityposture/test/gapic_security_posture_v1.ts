// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as securitypostureModule from '../src';

import {PassThrough} from 'stream';

import {
  protobuf,
  LROperation,
  operationsProtos,
  LocationProtos,
} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().rejects(callError)
    : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().callsArgWith(2, callError)
    : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1.SecurityPostureClient', () => {
  describe('Common methods', () => {
    it('has apiEndpoint', () => {
      const client = new securitypostureModule.v1.SecurityPostureClient();
      const apiEndpoint = client.apiEndpoint;
      assert.strictEqual(apiEndpoint, 'securityposture.googleapis.com');
    });

    it('has universeDomain', () => {
      const client = new securitypostureModule.v1.SecurityPostureClient();
      const universeDomain = client.universeDomain;
      assert.strictEqual(universeDomain, 'googleapis.com');
    });

    if (
      typeof process !== 'undefined' &&
      typeof process.emitWarning === 'function'
    ) {
      it('throws DeprecationWarning if static servicePath is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const servicePath =
          securitypostureModule.v1.SecurityPostureClient.servicePath;
        assert.strictEqual(servicePath, 'securityposture.googleapis.com');
        assert(stub.called);
        stub.restore();
      });

      it('throws DeprecationWarning if static apiEndpoint is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const apiEndpoint =
          securitypostureModule.v1.SecurityPostureClient.apiEndpoint;
        assert.strictEqual(apiEndpoint, 'securityposture.googleapis.com');
        assert(stub.called);
        stub.restore();
      });
    }
    it('sets apiEndpoint according to universe domain camelCase', () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        universeDomain: 'example.com',
      });
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'securityposture.example.com');
    });

    it('sets apiEndpoint according to universe domain snakeCase', () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        universe_domain: 'example.com',
      });
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'securityposture.example.com');
    });
    it('does not allow setting both universeDomain and universe_domain', () => {
      assert.throws(() => {
        new securitypostureModule.v1.SecurityPostureClient({
          universe_domain: 'example.com',
          universeDomain: 'example.net',
        });
      });
    });

    it('has port', () => {
      const port = securitypostureModule.v1.SecurityPostureClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client = new securitypostureModule.v1.SecurityPostureClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        fallback: true,
      });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.securityPostureStub, undefined);
      await client.initialize();
      assert(client.securityPostureStub);
    });

    it('has close method for the initialized client', done => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      assert(client.securityPostureStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.securityPostureStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('getPosture', () => {
    it('invokes getPosture without error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.GetPostureRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.GetPostureRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.Posture()
      );
      client.innerApiCalls.getPosture = stubSimpleCall(expectedResponse);
      const [response] = await client.getPosture(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getPosture as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getPosture as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getPosture without error using callback', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.GetPostureRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.GetPostureRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.Posture()
      );
      client.innerApiCalls.getPosture =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getPosture(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.securityposture.v1.IPosture | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getPosture as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getPosture as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getPosture with error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.GetPostureRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.GetPostureRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getPosture = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getPosture(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getPosture as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getPosture as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getPosture with closed client', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.GetPostureRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.GetPostureRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getPosture(request), expectedError);
    });
  });

  describe('getPostureDeployment', () => {
    it('invokes getPostureDeployment without error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.GetPostureDeploymentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.GetPostureDeploymentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.PostureDeployment()
      );
      client.innerApiCalls.getPostureDeployment =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getPostureDeployment(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getPostureDeployment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getPostureDeployment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getPostureDeployment without error using callback', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.GetPostureDeploymentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.GetPostureDeploymentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.PostureDeployment()
      );
      client.innerApiCalls.getPostureDeployment =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getPostureDeployment(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.securityposture.v1.IPostureDeployment | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getPostureDeployment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getPostureDeployment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getPostureDeployment with error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.GetPostureDeploymentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.GetPostureDeploymentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getPostureDeployment = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getPostureDeployment(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getPostureDeployment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getPostureDeployment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getPostureDeployment with closed client', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.GetPostureDeploymentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.GetPostureDeploymentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getPostureDeployment(request), expectedError);
    });
  });

  describe('getPostureTemplate', () => {
    it('invokes getPostureTemplate without error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.GetPostureTemplateRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.GetPostureTemplateRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.PostureTemplate()
      );
      client.innerApiCalls.getPostureTemplate =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getPostureTemplate(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getPostureTemplate as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getPostureTemplate as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getPostureTemplate without error using callback', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.GetPostureTemplateRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.GetPostureTemplateRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.PostureTemplate()
      );
      client.innerApiCalls.getPostureTemplate =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getPostureTemplate(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.securityposture.v1.IPostureTemplate | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getPostureTemplate as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getPostureTemplate as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getPostureTemplate with error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.GetPostureTemplateRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.GetPostureTemplateRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getPostureTemplate = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getPostureTemplate(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getPostureTemplate as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getPostureTemplate as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getPostureTemplate with closed client', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.GetPostureTemplateRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.GetPostureTemplateRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getPostureTemplate(request), expectedError);
    });
  });

  describe('createPosture', () => {
    it('invokes createPosture without error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.CreatePostureRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.CreatePostureRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createPosture =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createPosture(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createPosture as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createPosture as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createPosture without error using callback', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.CreatePostureRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.CreatePostureRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createPosture =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createPosture(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.securityposture.v1.IPosture,
              protos.google.cloud.securityposture.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.securityposture.v1.IPosture,
        protos.google.cloud.securityposture.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createPosture as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createPosture as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createPosture with call error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.CreatePostureRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.CreatePostureRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createPosture = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createPosture(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createPosture as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createPosture as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createPosture with LRO error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.CreatePostureRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.CreatePostureRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createPosture = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createPosture(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createPosture as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createPosture as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreatePostureProgress without error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreatePostureProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreatePostureProgress with error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreatePostureProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updatePosture', () => {
    it('invokes updatePosture without error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.UpdatePostureRequest()
      );
      request.posture ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.UpdatePostureRequest',
        ['posture', 'name']
      );
      request.posture.name = defaultValue1;
      const expectedHeaderRequestParams = `posture.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updatePosture =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updatePosture(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updatePosture as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updatePosture as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updatePosture without error using callback', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.UpdatePostureRequest()
      );
      request.posture ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.UpdatePostureRequest',
        ['posture', 'name']
      );
      request.posture.name = defaultValue1;
      const expectedHeaderRequestParams = `posture.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updatePosture =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updatePosture(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.securityposture.v1.IPosture,
              protos.google.cloud.securityposture.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.securityposture.v1.IPosture,
        protos.google.cloud.securityposture.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updatePosture as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updatePosture as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updatePosture with call error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.UpdatePostureRequest()
      );
      request.posture ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.UpdatePostureRequest',
        ['posture', 'name']
      );
      request.posture.name = defaultValue1;
      const expectedHeaderRequestParams = `posture.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updatePosture = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updatePosture(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updatePosture as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updatePosture as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updatePosture with LRO error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.UpdatePostureRequest()
      );
      request.posture ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.UpdatePostureRequest',
        ['posture', 'name']
      );
      request.posture.name = defaultValue1;
      const expectedHeaderRequestParams = `posture.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updatePosture = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updatePosture(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updatePosture as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updatePosture as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdatePostureProgress without error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdatePostureProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdatePostureProgress with error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdatePostureProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deletePosture', () => {
    it('invokes deletePosture without error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.DeletePostureRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.DeletePostureRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deletePosture =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deletePosture(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deletePosture as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deletePosture as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deletePosture without error using callback', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.DeletePostureRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.DeletePostureRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deletePosture =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deletePosture(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.securityposture.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.securityposture.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deletePosture as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deletePosture as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deletePosture with call error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.DeletePostureRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.DeletePostureRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deletePosture = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deletePosture(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deletePosture as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deletePosture as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deletePosture with LRO error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.DeletePostureRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.DeletePostureRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deletePosture = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deletePosture(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deletePosture as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deletePosture as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeletePostureProgress without error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeletePostureProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeletePostureProgress with error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeletePostureProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('extractPosture', () => {
    it('invokes extractPosture without error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.ExtractPostureRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.ExtractPostureRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.extractPosture =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.extractPosture(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.extractPosture as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.extractPosture as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes extractPosture without error using callback', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.ExtractPostureRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.ExtractPostureRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.extractPosture =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.extractPosture(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.securityposture.v1.IPosture,
              protos.google.cloud.securityposture.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.securityposture.v1.IPosture,
        protos.google.cloud.securityposture.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.extractPosture as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.extractPosture as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes extractPosture with call error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.ExtractPostureRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.ExtractPostureRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.extractPosture = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.extractPosture(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.extractPosture as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.extractPosture as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes extractPosture with LRO error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.ExtractPostureRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.ExtractPostureRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.extractPosture = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.extractPosture(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.extractPosture as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.extractPosture as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkExtractPostureProgress without error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkExtractPostureProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkExtractPostureProgress with error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkExtractPostureProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createPostureDeployment', () => {
    it('invokes createPostureDeployment without error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.CreatePostureDeploymentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.CreatePostureDeploymentRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createPostureDeployment =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createPostureDeployment(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createPostureDeployment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createPostureDeployment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createPostureDeployment without error using callback', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.CreatePostureDeploymentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.CreatePostureDeploymentRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createPostureDeployment =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createPostureDeployment(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.securityposture.v1.IPostureDeployment,
              protos.google.cloud.securityposture.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.securityposture.v1.IPostureDeployment,
        protos.google.cloud.securityposture.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createPostureDeployment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createPostureDeployment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createPostureDeployment with call error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.CreatePostureDeploymentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.CreatePostureDeploymentRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createPostureDeployment = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.createPostureDeployment(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.createPostureDeployment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createPostureDeployment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createPostureDeployment with LRO error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.CreatePostureDeploymentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.CreatePostureDeploymentRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createPostureDeployment = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createPostureDeployment(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createPostureDeployment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createPostureDeployment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreatePostureDeploymentProgress without error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkCreatePostureDeploymentProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreatePostureDeploymentProgress with error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreatePostureDeploymentProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updatePostureDeployment', () => {
    it('invokes updatePostureDeployment without error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.UpdatePostureDeploymentRequest()
      );
      request.postureDeployment ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.UpdatePostureDeploymentRequest',
        ['postureDeployment', 'name']
      );
      request.postureDeployment.name = defaultValue1;
      const expectedHeaderRequestParams = `posture_deployment.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updatePostureDeployment =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updatePostureDeployment(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updatePostureDeployment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updatePostureDeployment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updatePostureDeployment without error using callback', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.UpdatePostureDeploymentRequest()
      );
      request.postureDeployment ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.UpdatePostureDeploymentRequest',
        ['postureDeployment', 'name']
      );
      request.postureDeployment.name = defaultValue1;
      const expectedHeaderRequestParams = `posture_deployment.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updatePostureDeployment =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updatePostureDeployment(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.securityposture.v1.IPostureDeployment,
              protos.google.cloud.securityposture.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.securityposture.v1.IPostureDeployment,
        protos.google.cloud.securityposture.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updatePostureDeployment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updatePostureDeployment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updatePostureDeployment with call error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.UpdatePostureDeploymentRequest()
      );
      request.postureDeployment ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.UpdatePostureDeploymentRequest',
        ['postureDeployment', 'name']
      );
      request.postureDeployment.name = defaultValue1;
      const expectedHeaderRequestParams = `posture_deployment.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updatePostureDeployment = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.updatePostureDeployment(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.updatePostureDeployment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updatePostureDeployment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updatePostureDeployment with LRO error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.UpdatePostureDeploymentRequest()
      );
      request.postureDeployment ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.UpdatePostureDeploymentRequest',
        ['postureDeployment', 'name']
      );
      request.postureDeployment.name = defaultValue1;
      const expectedHeaderRequestParams = `posture_deployment.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updatePostureDeployment = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updatePostureDeployment(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updatePostureDeployment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updatePostureDeployment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdatePostureDeploymentProgress without error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkUpdatePostureDeploymentProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdatePostureDeploymentProgress with error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdatePostureDeploymentProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deletePostureDeployment', () => {
    it('invokes deletePostureDeployment without error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.DeletePostureDeploymentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.DeletePostureDeploymentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deletePostureDeployment =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deletePostureDeployment(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deletePostureDeployment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deletePostureDeployment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deletePostureDeployment without error using callback', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.DeletePostureDeploymentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.DeletePostureDeploymentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deletePostureDeployment =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deletePostureDeployment(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.securityposture.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.securityposture.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deletePostureDeployment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deletePostureDeployment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deletePostureDeployment with call error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.DeletePostureDeploymentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.DeletePostureDeploymentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deletePostureDeployment = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.deletePostureDeployment(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.deletePostureDeployment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deletePostureDeployment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deletePostureDeployment with LRO error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.DeletePostureDeploymentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.DeletePostureDeploymentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deletePostureDeployment = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deletePostureDeployment(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deletePostureDeployment as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deletePostureDeployment as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeletePostureDeploymentProgress without error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkDeletePostureDeploymentProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeletePostureDeploymentProgress with error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeletePostureDeploymentProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('listPostures', () => {
    it('invokes listPostures without error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.ListPosturesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.ListPosturesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.Posture()
        ),
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.Posture()
        ),
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.Posture()
        ),
      ];
      client.innerApiCalls.listPostures = stubSimpleCall(expectedResponse);
      const [response] = await client.listPostures(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listPostures as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listPostures as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listPostures without error using callback', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.ListPosturesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.ListPosturesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.Posture()
        ),
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.Posture()
        ),
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.Posture()
        ),
      ];
      client.innerApiCalls.listPostures =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listPostures(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.securityposture.v1.IPosture[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listPostures as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listPostures as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listPostures with error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.ListPosturesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.ListPosturesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listPostures = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listPostures(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listPostures as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listPostures as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listPosturesStream without error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.ListPosturesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.ListPosturesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.Posture()
        ),
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.Posture()
        ),
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.Posture()
        ),
      ];
      client.descriptors.page.listPostures.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listPosturesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.securityposture.v1.Posture[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.securityposture.v1.Posture) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listPostures.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listPostures, request)
      );
      assert(
        (client.descriptors.page.listPostures.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listPosturesStream with error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.ListPosturesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.ListPosturesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listPostures.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listPosturesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.securityposture.v1.Posture[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.securityposture.v1.Posture) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listPostures.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listPostures, request)
      );
      assert(
        (client.descriptors.page.listPostures.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listPostures without error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.ListPosturesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.ListPosturesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.Posture()
        ),
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.Posture()
        ),
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.Posture()
        ),
      ];
      client.descriptors.page.listPostures.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.securityposture.v1.IPosture[] = [];
      const iterable = client.listPosturesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listPostures.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listPostures.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listPostures with error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.ListPosturesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.ListPosturesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listPostures.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listPosturesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.securityposture.v1.IPosture[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listPostures.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listPostures.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listPostureRevisions', () => {
    it('invokes listPostureRevisions without error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.ListPostureRevisionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.ListPostureRevisionsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.Posture()
        ),
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.Posture()
        ),
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.Posture()
        ),
      ];
      client.innerApiCalls.listPostureRevisions =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listPostureRevisions(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listPostureRevisions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listPostureRevisions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listPostureRevisions without error using callback', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.ListPostureRevisionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.ListPostureRevisionsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.Posture()
        ),
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.Posture()
        ),
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.Posture()
        ),
      ];
      client.innerApiCalls.listPostureRevisions =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listPostureRevisions(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.securityposture.v1.IPosture[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listPostureRevisions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listPostureRevisions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listPostureRevisions with error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.ListPostureRevisionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.ListPostureRevisionsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listPostureRevisions = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listPostureRevisions(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listPostureRevisions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listPostureRevisions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listPostureRevisionsStream without error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.ListPostureRevisionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.ListPostureRevisionsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.Posture()
        ),
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.Posture()
        ),
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.Posture()
        ),
      ];
      client.descriptors.page.listPostureRevisions.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listPostureRevisionsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.securityposture.v1.Posture[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.securityposture.v1.Posture) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listPostureRevisions.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listPostureRevisions, request)
      );
      assert(
        (client.descriptors.page.listPostureRevisions.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listPostureRevisionsStream with error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.ListPostureRevisionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.ListPostureRevisionsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listPostureRevisions.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listPostureRevisionsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.securityposture.v1.Posture[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.securityposture.v1.Posture) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listPostureRevisions.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listPostureRevisions, request)
      );
      assert(
        (client.descriptors.page.listPostureRevisions.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listPostureRevisions without error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.ListPostureRevisionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.ListPostureRevisionsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.Posture()
        ),
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.Posture()
        ),
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.Posture()
        ),
      ];
      client.descriptors.page.listPostureRevisions.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.securityposture.v1.IPosture[] = [];
      const iterable = client.listPostureRevisionsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listPostureRevisions.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listPostureRevisions.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listPostureRevisions with error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.ListPostureRevisionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.ListPostureRevisionsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listPostureRevisions.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listPostureRevisionsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.securityposture.v1.IPosture[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listPostureRevisions.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listPostureRevisions.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listPostureDeployments', () => {
    it('invokes listPostureDeployments without error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.ListPostureDeploymentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.ListPostureDeploymentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.PostureDeployment()
        ),
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.PostureDeployment()
        ),
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.PostureDeployment()
        ),
      ];
      client.innerApiCalls.listPostureDeployments =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listPostureDeployments(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listPostureDeployments as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listPostureDeployments as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listPostureDeployments without error using callback', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.ListPostureDeploymentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.ListPostureDeploymentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.PostureDeployment()
        ),
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.PostureDeployment()
        ),
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.PostureDeployment()
        ),
      ];
      client.innerApiCalls.listPostureDeployments =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listPostureDeployments(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.securityposture.v1.IPostureDeployment[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listPostureDeployments as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listPostureDeployments as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listPostureDeployments with error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.ListPostureDeploymentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.ListPostureDeploymentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listPostureDeployments = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listPostureDeployments(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listPostureDeployments as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listPostureDeployments as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listPostureDeploymentsStream without error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.ListPostureDeploymentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.ListPostureDeploymentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.PostureDeployment()
        ),
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.PostureDeployment()
        ),
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.PostureDeployment()
        ),
      ];
      client.descriptors.page.listPostureDeployments.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listPostureDeploymentsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.securityposture.v1.PostureDeployment[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.securityposture.v1.PostureDeployment
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listPostureDeployments
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listPostureDeployments, request)
      );
      assert(
        (
          client.descriptors.page.listPostureDeployments
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listPostureDeploymentsStream with error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.ListPostureDeploymentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.ListPostureDeploymentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listPostureDeployments.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listPostureDeploymentsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.securityposture.v1.PostureDeployment[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.securityposture.v1.PostureDeployment
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listPostureDeployments
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listPostureDeployments, request)
      );
      assert(
        (
          client.descriptors.page.listPostureDeployments
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listPostureDeployments without error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.ListPostureDeploymentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.ListPostureDeploymentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.PostureDeployment()
        ),
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.PostureDeployment()
        ),
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.PostureDeployment()
        ),
      ];
      client.descriptors.page.listPostureDeployments.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.securityposture.v1.IPostureDeployment[] =
        [];
      const iterable = client.listPostureDeploymentsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listPostureDeployments
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listPostureDeployments
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listPostureDeployments with error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.ListPostureDeploymentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.ListPostureDeploymentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listPostureDeployments.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listPostureDeploymentsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.securityposture.v1.IPostureDeployment[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listPostureDeployments
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listPostureDeployments
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listPostureTemplates', () => {
    it('invokes listPostureTemplates without error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.ListPostureTemplatesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.ListPostureTemplatesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.PostureTemplate()
        ),
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.PostureTemplate()
        ),
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.PostureTemplate()
        ),
      ];
      client.innerApiCalls.listPostureTemplates =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listPostureTemplates(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listPostureTemplates as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listPostureTemplates as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listPostureTemplates without error using callback', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.ListPostureTemplatesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.ListPostureTemplatesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.PostureTemplate()
        ),
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.PostureTemplate()
        ),
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.PostureTemplate()
        ),
      ];
      client.innerApiCalls.listPostureTemplates =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listPostureTemplates(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.securityposture.v1.IPostureTemplate[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listPostureTemplates as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listPostureTemplates as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listPostureTemplates with error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.ListPostureTemplatesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.ListPostureTemplatesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listPostureTemplates = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listPostureTemplates(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listPostureTemplates as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listPostureTemplates as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listPostureTemplatesStream without error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.ListPostureTemplatesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.ListPostureTemplatesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.PostureTemplate()
        ),
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.PostureTemplate()
        ),
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.PostureTemplate()
        ),
      ];
      client.descriptors.page.listPostureTemplates.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listPostureTemplatesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.securityposture.v1.PostureTemplate[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.securityposture.v1.PostureTemplate
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listPostureTemplates.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listPostureTemplates, request)
      );
      assert(
        (client.descriptors.page.listPostureTemplates.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listPostureTemplatesStream with error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.ListPostureTemplatesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.ListPostureTemplatesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listPostureTemplates.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listPostureTemplatesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.securityposture.v1.PostureTemplate[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.securityposture.v1.PostureTemplate
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listPostureTemplates.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listPostureTemplates, request)
      );
      assert(
        (client.descriptors.page.listPostureTemplates.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listPostureTemplates without error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.ListPostureTemplatesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.ListPostureTemplatesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.PostureTemplate()
        ),
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.PostureTemplate()
        ),
        generateSampleMessage(
          new protos.google.cloud.securityposture.v1.PostureTemplate()
        ),
      ];
      client.descriptors.page.listPostureTemplates.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.securityposture.v1.IPostureTemplate[] =
        [];
      const iterable = client.listPostureTemplatesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listPostureTemplates.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listPostureTemplates.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listPostureTemplates with error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securityposture.v1.ListPostureTemplatesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securityposture.v1.ListPostureTemplatesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listPostureTemplates.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listPostureTemplatesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.securityposture.v1.IPostureTemplate[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listPostureTemplates.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listPostureTemplates.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
  describe('getLocation', () => {
    it('invokes getLocation without error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = stubSimpleCall(expectedResponse);
      const response = await client.getLocation(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes getLocation without error using callback', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getLocation(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: LocationProtos.google.cloud.location.ILocation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.locationsClient.getLocation as SinonStub).getCall(0));
    });
    it('invokes getLocation with error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.locationsClient.getLocation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getLocation(request, expectedOptions),
        expectedError
      );
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('listLocationsAsync', () => {
    it('uses async iteration with listLocations without error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedResponse = [
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
      ];
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: LocationProtos.google.cloud.location.ILocation[] = [];
      const iterable = client.listLocationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
    it('uses async iteration with listLocations with error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedError = new Error('expected');
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listLocationsAsync(request);
      await assert.rejects(async () => {
        const responses: LocationProtos.google.cloud.location.ILocation[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
  describe('getOperation', () => {
    it('invokes getOperation without error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const response = await client.getOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes getOperation without error using callback', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.getOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: operationsProtos.google.longrunning.Operation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
    it('invokes getOperation with error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.getOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('cancelOperation', () => {
    it('invokes cancelOperation without error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.cancelOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes cancelOperation without error using callback', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.cancelOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.cancelOperation as SinonStub).getCall(0));
    });
    it('invokes cancelOperation with error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.cancelOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.cancelOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('deleteOperation', () => {
    it('invokes deleteOperation without error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.deleteOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes deleteOperation without error using callback', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.deleteOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.deleteOperation as SinonStub).getCall(0));
    });
    it('invokes deleteOperation with error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.deleteOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.deleteOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('listOperationsAsync', () => {
    it('uses async iteration with listOperations without error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
      ];
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
        [];
      const iterable = client.operationsClient.listOperationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
    it('uses async iteration with listOperations with error', async () => {
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.operationsClient.listOperationsAsync(request);
      await assert.rejects(async () => {
        const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
  });

  describe('Path templates', () => {
    describe('organization', () => {
      const fakePath = '/rendered/path/organization';
      const expectedParameters = {
        organization: 'organizationValue',
        location: 'locationValue',
      };
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.organizationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.organizationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('organizationPath', () => {
        const result = client.organizationPath(
          'organizationValue',
          'locationValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.organizationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchOrganizationFromOrganizationName', () => {
        const result = client.matchOrganizationFromOrganizationName(fakePath);
        assert.strictEqual(result, 'organizationValue');
        assert(
          (client.pathTemplates.organizationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromOrganizationName', () => {
        const result = client.matchLocationFromOrganizationName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.organizationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('posture', () => {
      const fakePath = '/rendered/path/posture';
      const expectedParameters = {
        organization: 'organizationValue',
        location: 'locationValue',
        posture: 'postureValue',
      };
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.posturePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.posturePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('posturePath', () => {
        const result = client.posturePath(
          'organizationValue',
          'locationValue',
          'postureValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.posturePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchOrganizationFromPostureName', () => {
        const result = client.matchOrganizationFromPostureName(fakePath);
        assert.strictEqual(result, 'organizationValue');
        assert(
          (client.pathTemplates.posturePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromPostureName', () => {
        const result = client.matchLocationFromPostureName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.posturePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchPostureFromPostureName', () => {
        const result = client.matchPostureFromPostureName(fakePath);
        assert.strictEqual(result, 'postureValue');
        assert(
          (client.pathTemplates.posturePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('postureDeployment', () => {
      const fakePath = '/rendered/path/postureDeployment';
      const expectedParameters = {
        organization: 'organizationValue',
        location: 'locationValue',
        posture_deployment: 'postureDeploymentValue',
      };
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.postureDeploymentPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.postureDeploymentPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('postureDeploymentPath', () => {
        const result = client.postureDeploymentPath(
          'organizationValue',
          'locationValue',
          'postureDeploymentValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.postureDeploymentPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchOrganizationFromPostureDeploymentName', () => {
        const result =
          client.matchOrganizationFromPostureDeploymentName(fakePath);
        assert.strictEqual(result, 'organizationValue');
        assert(
          (
            client.pathTemplates.postureDeploymentPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromPostureDeploymentName', () => {
        const result = client.matchLocationFromPostureDeploymentName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.postureDeploymentPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchPostureDeploymentFromPostureDeploymentName', () => {
        const result =
          client.matchPostureDeploymentFromPostureDeploymentName(fakePath);
        assert.strictEqual(result, 'postureDeploymentValue');
        assert(
          (
            client.pathTemplates.postureDeploymentPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('postureTemplate', () => {
      const fakePath = '/rendered/path/postureTemplate';
      const expectedParameters = {
        organization: 'organizationValue',
        location: 'locationValue',
        posture_template: 'postureTemplateValue',
      };
      const client = new securitypostureModule.v1.SecurityPostureClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.postureTemplatePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.postureTemplatePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('postureTemplatePath', () => {
        const result = client.postureTemplatePath(
          'organizationValue',
          'locationValue',
          'postureTemplateValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.postureTemplatePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchOrganizationFromPostureTemplateName', () => {
        const result =
          client.matchOrganizationFromPostureTemplateName(fakePath);
        assert.strictEqual(result, 'organizationValue');
        assert(
          (client.pathTemplates.postureTemplatePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromPostureTemplateName', () => {
        const result = client.matchLocationFromPostureTemplateName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.postureTemplatePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchPostureTemplateFromPostureTemplateName', () => {
        const result =
          client.matchPostureTemplateFromPostureTemplateName(fakePath);
        assert.strictEqual(result, 'postureTemplateValue');
        assert(
          (client.pathTemplates.postureTemplatePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
