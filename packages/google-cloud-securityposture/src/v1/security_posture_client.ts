// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
  LocationsClient,
  LocationProtos,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');

/**
 * Client JSON configuration object, loaded from
 * `src/v1/security_posture_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './security_posture_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Service describing handlers for resources.
 * @class
 * @memberof v1
 */
export class SecurityPostureClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  securityPostureStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of SecurityPostureClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new SecurityPostureClient({fallback: true}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof SecurityPostureClient;
    if (
      opts?.universe_domain &&
      opts?.universeDomain &&
      opts?.universe_domain !== opts?.universeDomain
    ) {
      throw new Error(
        'Please set either universe_domain or universeDomain, but not both.'
      );
    }
    this._universeDomain =
      opts?.universeDomain ?? opts?.universe_domain ?? 'googleapis.com';
    this._servicePath = 'securityposture.' + this._universeDomain;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      organizationPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/locations/{location}'
      ),
      posturePathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/locations/{location}/postures/{posture}'
      ),
      postureDeploymentPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/locations/{location}/postureDeployments/{posture_deployment}'
      ),
      postureTemplatePathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/locations/{location}/postureTemplates/{posture_template}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listPostures: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'postures'
      ),
      listPostureRevisions: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'revisions'
      ),
      listPostureDeployments: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'postureDeployments'
      ),
      listPostureTemplates: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'postureTemplates'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback) {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.cloud.location.Locations.GetLocation',
          get: '/v1/{name=organizations/*/locations/*}',
        },
        {
          selector: 'google.cloud.location.Locations.ListLocations',
          get: '/v1/{name=organizations/*}/locations',
        },
        {
          selector: 'google.longrunning.Operations.CancelOperation',
          post: '/v1/{name=organizations/*/locations/*/operations/*}:cancel',
          body: '*',
        },
        {
          selector: 'google.longrunning.Operations.DeleteOperation',
          delete: '/v1/{name=organizations/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v1/{name=organizations/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.ListOperations',
          get: '/v1/{name=organizations/*/locations/*}/operations',
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const createPostureResponse = protoFilesRoot.lookup(
      '.google.cloud.securityposture.v1.Posture'
    ) as gax.protobuf.Type;
    const createPostureMetadata = protoFilesRoot.lookup(
      '.google.cloud.securityposture.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updatePostureResponse = protoFilesRoot.lookup(
      '.google.cloud.securityposture.v1.Posture'
    ) as gax.protobuf.Type;
    const updatePostureMetadata = protoFilesRoot.lookup(
      '.google.cloud.securityposture.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deletePostureResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deletePostureMetadata = protoFilesRoot.lookup(
      '.google.cloud.securityposture.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const extractPostureResponse = protoFilesRoot.lookup(
      '.google.cloud.securityposture.v1.Posture'
    ) as gax.protobuf.Type;
    const extractPostureMetadata = protoFilesRoot.lookup(
      '.google.cloud.securityposture.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createPostureDeploymentResponse = protoFilesRoot.lookup(
      '.google.cloud.securityposture.v1.PostureDeployment'
    ) as gax.protobuf.Type;
    const createPostureDeploymentMetadata = protoFilesRoot.lookup(
      '.google.cloud.securityposture.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updatePostureDeploymentResponse = protoFilesRoot.lookup(
      '.google.cloud.securityposture.v1.PostureDeployment'
    ) as gax.protobuf.Type;
    const updatePostureDeploymentMetadata = protoFilesRoot.lookup(
      '.google.cloud.securityposture.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deletePostureDeploymentResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deletePostureDeploymentMetadata = protoFilesRoot.lookup(
      '.google.cloud.securityposture.v1.OperationMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createPosture: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createPostureResponse.decode.bind(createPostureResponse),
        createPostureMetadata.decode.bind(createPostureMetadata)
      ),
      updatePosture: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updatePostureResponse.decode.bind(updatePostureResponse),
        updatePostureMetadata.decode.bind(updatePostureMetadata)
      ),
      deletePosture: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deletePostureResponse.decode.bind(deletePostureResponse),
        deletePostureMetadata.decode.bind(deletePostureMetadata)
      ),
      extractPosture: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        extractPostureResponse.decode.bind(extractPostureResponse),
        extractPostureMetadata.decode.bind(extractPostureMetadata)
      ),
      createPostureDeployment: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createPostureDeploymentResponse.decode.bind(
          createPostureDeploymentResponse
        ),
        createPostureDeploymentMetadata.decode.bind(
          createPostureDeploymentMetadata
        )
      ),
      updatePostureDeployment: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updatePostureDeploymentResponse.decode.bind(
          updatePostureDeploymentResponse
        ),
        updatePostureDeploymentMetadata.decode.bind(
          updatePostureDeploymentMetadata
        )
      ),
      deletePostureDeployment: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deletePostureDeploymentResponse.decode.bind(
          deletePostureDeploymentResponse
        ),
        deletePostureDeploymentMetadata.decode.bind(
          deletePostureDeploymentMetadata
        )
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.securityposture.v1.SecurityPosture',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.securityPostureStub) {
      return this.securityPostureStub;
    }

    // Put together the "service stub" for
    // google.cloud.securityposture.v1.SecurityPosture.
    this.securityPostureStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.securityposture.v1.SecurityPosture'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.securityposture.v1.SecurityPosture,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const securityPostureStubMethods = [
      'listPostures',
      'listPostureRevisions',
      'getPosture',
      'createPosture',
      'updatePosture',
      'deletePosture',
      'extractPosture',
      'listPostureDeployments',
      'getPostureDeployment',
      'createPostureDeployment',
      'updatePostureDeployment',
      'deletePostureDeployment',
      'listPostureTemplates',
      'getPostureTemplate',
    ];
    for (const methodName of securityPostureStubMethods) {
      const callPromise = this.securityPostureStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.securityPostureStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (
      typeof process !== undefined &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static servicePath is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'securityposture.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (
      typeof process !== undefined &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static apiEndpoint is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'securityposture.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Gets a posture in a given organization and location.
   * User must provide revision_id to retrieve a specific revision of the
   * resource.
   * NOT_FOUND error is returned if the revision_id or the Posture name does not
   * exist. In case revision_id is not provided then the latest Posture revision
   * by UpdateTime is returned.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource.
   * @param {string} [request.revisionId]
   *   Optional. Posture revision which needs to be retrieved.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.securityposture.v1.Posture|Posture}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/security_posture.get_posture.js</caption>
   * region_tag:securityposture_v1_generated_SecurityPosture_GetPosture_async
   */
  getPosture(
    request?: protos.google.cloud.securityposture.v1.IGetPostureRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.securityposture.v1.IPosture,
      protos.google.cloud.securityposture.v1.IGetPostureRequest | undefined,
      {} | undefined,
    ]
  >;
  getPosture(
    request: protos.google.cloud.securityposture.v1.IGetPostureRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.securityposture.v1.IPosture,
      | protos.google.cloud.securityposture.v1.IGetPostureRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getPosture(
    request: protos.google.cloud.securityposture.v1.IGetPostureRequest,
    callback: Callback<
      protos.google.cloud.securityposture.v1.IPosture,
      | protos.google.cloud.securityposture.v1.IGetPostureRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getPosture(
    request?: protos.google.cloud.securityposture.v1.IGetPostureRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.securityposture.v1.IPosture,
          | protos.google.cloud.securityposture.v1.IGetPostureRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.securityposture.v1.IPosture,
      | protos.google.cloud.securityposture.v1.IGetPostureRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.securityposture.v1.IPosture,
      protos.google.cloud.securityposture.v1.IGetPostureRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getPosture(request, options, callback);
  }
  /**
   * Gets details of a single PostureDeployment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.securityposture.v1.PostureDeployment|PostureDeployment}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/security_posture.get_posture_deployment.js</caption>
   * region_tag:securityposture_v1_generated_SecurityPosture_GetPostureDeployment_async
   */
  getPostureDeployment(
    request?: protos.google.cloud.securityposture.v1.IGetPostureDeploymentRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.securityposture.v1.IPostureDeployment,
      (
        | protos.google.cloud.securityposture.v1.IGetPostureDeploymentRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getPostureDeployment(
    request: protos.google.cloud.securityposture.v1.IGetPostureDeploymentRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.securityposture.v1.IPostureDeployment,
      | protos.google.cloud.securityposture.v1.IGetPostureDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getPostureDeployment(
    request: protos.google.cloud.securityposture.v1.IGetPostureDeploymentRequest,
    callback: Callback<
      protos.google.cloud.securityposture.v1.IPostureDeployment,
      | protos.google.cloud.securityposture.v1.IGetPostureDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getPostureDeployment(
    request?: protos.google.cloud.securityposture.v1.IGetPostureDeploymentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.securityposture.v1.IPostureDeployment,
          | protos.google.cloud.securityposture.v1.IGetPostureDeploymentRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.securityposture.v1.IPostureDeployment,
      | protos.google.cloud.securityposture.v1.IGetPostureDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.securityposture.v1.IPostureDeployment,
      (
        | protos.google.cloud.securityposture.v1.IGetPostureDeploymentRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getPostureDeployment(request, options, callback);
  }
  /**
   * Gets a PostureTemplate.
   * User must provide revision_id to retrieve a specific revision of the
   * resource.
   * NOT_FOUND error is returned if the revision_id or the PostureTemplate name
   * does not exist. In case revision_id is not provided then the
   * PostureTemplate with latest revision_id is returned.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource.
   * @param {string} [request.revisionId]
   *   Optional. Specific revision_id of a Posture Template.
   *   PostureTemplate revision_id which needs to be retrieved.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.securityposture.v1.PostureTemplate|PostureTemplate}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/security_posture.get_posture_template.js</caption>
   * region_tag:securityposture_v1_generated_SecurityPosture_GetPostureTemplate_async
   */
  getPostureTemplate(
    request?: protos.google.cloud.securityposture.v1.IGetPostureTemplateRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.securityposture.v1.IPostureTemplate,
      (
        | protos.google.cloud.securityposture.v1.IGetPostureTemplateRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getPostureTemplate(
    request: protos.google.cloud.securityposture.v1.IGetPostureTemplateRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.securityposture.v1.IPostureTemplate,
      | protos.google.cloud.securityposture.v1.IGetPostureTemplateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getPostureTemplate(
    request: protos.google.cloud.securityposture.v1.IGetPostureTemplateRequest,
    callback: Callback<
      protos.google.cloud.securityposture.v1.IPostureTemplate,
      | protos.google.cloud.securityposture.v1.IGetPostureTemplateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getPostureTemplate(
    request?: protos.google.cloud.securityposture.v1.IGetPostureTemplateRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.securityposture.v1.IPostureTemplate,
          | protos.google.cloud.securityposture.v1.IGetPostureTemplateRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.securityposture.v1.IPostureTemplate,
      | protos.google.cloud.securityposture.v1.IGetPostureTemplateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.securityposture.v1.IPostureTemplate,
      (
        | protos.google.cloud.securityposture.v1.IGetPostureTemplateRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getPostureTemplate(request, options, callback);
  }

  /**
   * Creates a new Posture resource.
   * If a Posture with the specified name already exists in the specified
   * organization and location, the long running operation returns a
   * {@link protos.google.rpc.Code.ALREADY_EXISTS|ALREADY_EXISTS} error.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Value for parent.
   * @param {string} request.postureId
   *   Required. User provided identifier. It should be unique in scope of an
   *   Organization and location.
   * @param {google.cloud.securityposture.v1.Posture} request.posture
   *   Required. The resource being created.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/security_posture.create_posture.js</caption>
   * region_tag:securityposture_v1_generated_SecurityPosture_CreatePosture_async
   */
  createPosture(
    request?: protos.google.cloud.securityposture.v1.ICreatePostureRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.securityposture.v1.IPosture,
        protos.google.cloud.securityposture.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createPosture(
    request: protos.google.cloud.securityposture.v1.ICreatePostureRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.securityposture.v1.IPosture,
        protos.google.cloud.securityposture.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createPosture(
    request: protos.google.cloud.securityposture.v1.ICreatePostureRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.securityposture.v1.IPosture,
        protos.google.cloud.securityposture.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createPosture(
    request?: protos.google.cloud.securityposture.v1.ICreatePostureRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.securityposture.v1.IPosture,
            protos.google.cloud.securityposture.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.securityposture.v1.IPosture,
        protos.google.cloud.securityposture.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.securityposture.v1.IPosture,
        protos.google.cloud.securityposture.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createPosture(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createPosture()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/security_posture.create_posture.js</caption>
   * region_tag:securityposture_v1_generated_SecurityPosture_CreatePosture_async
   */
  async checkCreatePostureProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.securityposture.v1.Posture,
      protos.google.cloud.securityposture.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createPosture,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.securityposture.v1.Posture,
      protos.google.cloud.securityposture.v1.OperationMetadata
    >;
  }
  /**
   * Updates an existing Posture.
   * A new revision of the posture will be created if the revision to be
   * updated is currently deployed on a workload.
   * Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
   * Posture does not exist.
   * Returns a `google.rpc.Status` with `google.rpc.Code.ABORTED` if the etag
   * supplied in the request does not match the persisted etag of the Posture.
   * Updatable fields are state, description and policy_sets.
   * State update operation cannot be clubbed with update of description and
   * policy_sets.
   * An ACTIVE posture can be updated to both DRAFT or DEPRECATED states.
   * Postures in DRAFT or DEPRECATED states can only be updated to ACTIVE state.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Field mask is used to specify the fields to be overwritten in the
   *   Posture resource by the update.
   *   The fields specified in the update_mask are relative to the resource, not
   *   the full request. A field will be overwritten if it is in the mask. If the
   *   user does not provide a mask then all fields will be overwritten.
   * @param {google.cloud.securityposture.v1.Posture} request.posture
   *   Required. The resource being updated.
   * @param {string} request.revisionId
   *   Required. Posture revision which needs to be updated.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/security_posture.update_posture.js</caption>
   * region_tag:securityposture_v1_generated_SecurityPosture_UpdatePosture_async
   */
  updatePosture(
    request?: protos.google.cloud.securityposture.v1.IUpdatePostureRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.securityposture.v1.IPosture,
        protos.google.cloud.securityposture.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updatePosture(
    request: protos.google.cloud.securityposture.v1.IUpdatePostureRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.securityposture.v1.IPosture,
        protos.google.cloud.securityposture.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updatePosture(
    request: protos.google.cloud.securityposture.v1.IUpdatePostureRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.securityposture.v1.IPosture,
        protos.google.cloud.securityposture.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updatePosture(
    request?: protos.google.cloud.securityposture.v1.IUpdatePostureRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.securityposture.v1.IPosture,
            protos.google.cloud.securityposture.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.securityposture.v1.IPosture,
        protos.google.cloud.securityposture.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.securityposture.v1.IPosture,
        protos.google.cloud.securityposture.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'posture.name': request.posture!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updatePosture(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updatePosture()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/security_posture.update_posture.js</caption>
   * region_tag:securityposture_v1_generated_SecurityPosture_UpdatePosture_async
   */
  async checkUpdatePostureProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.securityposture.v1.Posture,
      protos.google.cloud.securityposture.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updatePosture,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.securityposture.v1.Posture,
      protos.google.cloud.securityposture.v1.OperationMetadata
    >;
  }
  /**
   * Deletes all the revisions of a resource.
   * A posture can only be deleted when none of the revisions are deployed to
   * any workload.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource.
   * @param {string} [request.etag]
   *   Optional. Etag value of the Posture to be deleted.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/security_posture.delete_posture.js</caption>
   * region_tag:securityposture_v1_generated_SecurityPosture_DeletePosture_async
   */
  deletePosture(
    request?: protos.google.cloud.securityposture.v1.IDeletePostureRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.securityposture.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deletePosture(
    request: protos.google.cloud.securityposture.v1.IDeletePostureRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.securityposture.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deletePosture(
    request: protos.google.cloud.securityposture.v1.IDeletePostureRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.securityposture.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deletePosture(
    request?: protos.google.cloud.securityposture.v1.IDeletePostureRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.securityposture.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.securityposture.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.securityposture.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deletePosture(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deletePosture()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/security_posture.delete_posture.js</caption>
   * region_tag:securityposture_v1_generated_SecurityPosture_DeletePosture_async
   */
  async checkDeletePostureProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.securityposture.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deletePosture,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.securityposture.v1.OperationMetadata
    >;
  }
  /**
   * Extracts existing policies on a workload as a posture.
   * If a Posture on the given workload already exists, the long running
   * operation returns a {@link protos.google.rpc.Code.ALREADY_EXISTS|ALREADY_EXISTS} error.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource name. The format of this value is as follows:
   *   `organizations/{organization}/locations/{location}`
   * @param {string} request.postureId
   *   Required. User provided identifier. It should be unique in scope of an
   *   Organization and location.
   * @param {string} request.workload
   *   Required. Workload from which the policies are to be extracted, it should
   *   belong to the same organization defined in parent. The format of this value
   *   varies depending on the scope of the request:
   *   - `folder/folderNumber`
   *   - `project/projectNumber`
   *   - `organization/organizationNumber`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/security_posture.extract_posture.js</caption>
   * region_tag:securityposture_v1_generated_SecurityPosture_ExtractPosture_async
   */
  extractPosture(
    request?: protos.google.cloud.securityposture.v1.IExtractPostureRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.securityposture.v1.IPosture,
        protos.google.cloud.securityposture.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  extractPosture(
    request: protos.google.cloud.securityposture.v1.IExtractPostureRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.securityposture.v1.IPosture,
        protos.google.cloud.securityposture.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  extractPosture(
    request: protos.google.cloud.securityposture.v1.IExtractPostureRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.securityposture.v1.IPosture,
        protos.google.cloud.securityposture.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  extractPosture(
    request?: protos.google.cloud.securityposture.v1.IExtractPostureRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.securityposture.v1.IPosture,
            protos.google.cloud.securityposture.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.securityposture.v1.IPosture,
        protos.google.cloud.securityposture.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.securityposture.v1.IPosture,
        protos.google.cloud.securityposture.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.extractPosture(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `extractPosture()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/security_posture.extract_posture.js</caption>
   * region_tag:securityposture_v1_generated_SecurityPosture_ExtractPosture_async
   */
  async checkExtractPostureProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.securityposture.v1.Posture,
      protos.google.cloud.securityposture.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.extractPosture,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.securityposture.v1.Posture,
      protos.google.cloud.securityposture.v1.OperationMetadata
    >;
  }
  /**
   * Creates a new PostureDeployment in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Value for parent.
   *   Format: organizations/{org_id}/locations/{location}
   * @param {string} request.postureDeploymentId
   *   Required. User provided identifier. It should be unique in scope of an
   *   Organization and location.
   * @param {google.cloud.securityposture.v1.PostureDeployment} request.postureDeployment
   *   Required. The resource being created.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/security_posture.create_posture_deployment.js</caption>
   * region_tag:securityposture_v1_generated_SecurityPosture_CreatePostureDeployment_async
   */
  createPostureDeployment(
    request?: protos.google.cloud.securityposture.v1.ICreatePostureDeploymentRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.securityposture.v1.IPostureDeployment,
        protos.google.cloud.securityposture.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createPostureDeployment(
    request: protos.google.cloud.securityposture.v1.ICreatePostureDeploymentRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.securityposture.v1.IPostureDeployment,
        protos.google.cloud.securityposture.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createPostureDeployment(
    request: protos.google.cloud.securityposture.v1.ICreatePostureDeploymentRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.securityposture.v1.IPostureDeployment,
        protos.google.cloud.securityposture.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createPostureDeployment(
    request?: protos.google.cloud.securityposture.v1.ICreatePostureDeploymentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.securityposture.v1.IPostureDeployment,
            protos.google.cloud.securityposture.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.securityposture.v1.IPostureDeployment,
        protos.google.cloud.securityposture.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.securityposture.v1.IPostureDeployment,
        protos.google.cloud.securityposture.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createPostureDeployment(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `createPostureDeployment()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/security_posture.create_posture_deployment.js</caption>
   * region_tag:securityposture_v1_generated_SecurityPosture_CreatePostureDeployment_async
   */
  async checkCreatePostureDeploymentProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.securityposture.v1.PostureDeployment,
      protos.google.cloud.securityposture.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createPostureDeployment,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.securityposture.v1.PostureDeployment,
      protos.google.cloud.securityposture.v1.OperationMetadata
    >;
  }
  /**
   * Updates the parameters of a single PostureDeployment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Field mask is used to specify the fields to be overwritten in the
   *   PostureDeployment resource by the update.
   *   The fields specified in the update_mask are relative to the resource, not
   *   the full request. A field will be overwritten if it is in the mask. If the
   *   user does not provide a mask then all fields will be overwritten.
   * @param {google.cloud.securityposture.v1.PostureDeployment} request.postureDeployment
   *   Required. The resource being updated.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/security_posture.update_posture_deployment.js</caption>
   * region_tag:securityposture_v1_generated_SecurityPosture_UpdatePostureDeployment_async
   */
  updatePostureDeployment(
    request?: protos.google.cloud.securityposture.v1.IUpdatePostureDeploymentRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.securityposture.v1.IPostureDeployment,
        protos.google.cloud.securityposture.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updatePostureDeployment(
    request: protos.google.cloud.securityposture.v1.IUpdatePostureDeploymentRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.securityposture.v1.IPostureDeployment,
        protos.google.cloud.securityposture.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updatePostureDeployment(
    request: protos.google.cloud.securityposture.v1.IUpdatePostureDeploymentRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.securityposture.v1.IPostureDeployment,
        protos.google.cloud.securityposture.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updatePostureDeployment(
    request?: protos.google.cloud.securityposture.v1.IUpdatePostureDeploymentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.securityposture.v1.IPostureDeployment,
            protos.google.cloud.securityposture.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.securityposture.v1.IPostureDeployment,
        protos.google.cloud.securityposture.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.securityposture.v1.IPostureDeployment,
        protos.google.cloud.securityposture.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'posture_deployment.name': request.postureDeployment!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updatePostureDeployment(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `updatePostureDeployment()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/security_posture.update_posture_deployment.js</caption>
   * region_tag:securityposture_v1_generated_SecurityPosture_UpdatePostureDeployment_async
   */
  async checkUpdatePostureDeploymentProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.securityposture.v1.PostureDeployment,
      protos.google.cloud.securityposture.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updatePostureDeployment,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.securityposture.v1.PostureDeployment,
      protos.google.cloud.securityposture.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a single PostureDeployment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource.
   * @param {string} [request.etag]
   *   Optional. Etag value of the PostureDeployment to be deleted.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/security_posture.delete_posture_deployment.js</caption>
   * region_tag:securityposture_v1_generated_SecurityPosture_DeletePostureDeployment_async
   */
  deletePostureDeployment(
    request?: protos.google.cloud.securityposture.v1.IDeletePostureDeploymentRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.securityposture.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deletePostureDeployment(
    request: protos.google.cloud.securityposture.v1.IDeletePostureDeploymentRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.securityposture.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deletePostureDeployment(
    request: protos.google.cloud.securityposture.v1.IDeletePostureDeploymentRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.securityposture.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deletePostureDeployment(
    request?: protos.google.cloud.securityposture.v1.IDeletePostureDeploymentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.securityposture.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.securityposture.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.securityposture.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deletePostureDeployment(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `deletePostureDeployment()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/security_posture.delete_posture_deployment.js</caption>
   * region_tag:securityposture_v1_generated_SecurityPosture_DeletePostureDeployment_async
   */
  async checkDeletePostureDeploymentProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.securityposture.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deletePostureDeployment,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.securityposture.v1.OperationMetadata
    >;
  }
  /**
   * (-- This option restricts the visibility of the API to only projects that
   * will
   * (-- be labeled as `PREVIEW` or `GOOGLE_INTERNAL` by the service.
   * (-- option (google.api.api_visibility).restriction =
   * "PREVIEW,GOOGLE_INTERNAL"; Postures Lists Postures in a given organization
   * and location. In case a posture has multiple revisions, the latest revision
   * as per UpdateTime will be returned.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListPosturesRequest.
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.securityposture.v1.Posture|Posture}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listPosturesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listPostures(
    request?: protos.google.cloud.securityposture.v1.IListPosturesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.securityposture.v1.IPosture[],
      protos.google.cloud.securityposture.v1.IListPosturesRequest | null,
      protos.google.cloud.securityposture.v1.IListPosturesResponse,
    ]
  >;
  listPostures(
    request: protos.google.cloud.securityposture.v1.IListPosturesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.securityposture.v1.IListPosturesRequest,
      | protos.google.cloud.securityposture.v1.IListPosturesResponse
      | null
      | undefined,
      protos.google.cloud.securityposture.v1.IPosture
    >
  ): void;
  listPostures(
    request: protos.google.cloud.securityposture.v1.IListPosturesRequest,
    callback: PaginationCallback<
      protos.google.cloud.securityposture.v1.IListPosturesRequest,
      | protos.google.cloud.securityposture.v1.IListPosturesResponse
      | null
      | undefined,
      protos.google.cloud.securityposture.v1.IPosture
    >
  ): void;
  listPostures(
    request?: protos.google.cloud.securityposture.v1.IListPosturesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.securityposture.v1.IListPosturesRequest,
          | protos.google.cloud.securityposture.v1.IListPosturesResponse
          | null
          | undefined,
          protos.google.cloud.securityposture.v1.IPosture
        >,
    callback?: PaginationCallback<
      protos.google.cloud.securityposture.v1.IListPosturesRequest,
      | protos.google.cloud.securityposture.v1.IListPosturesResponse
      | null
      | undefined,
      protos.google.cloud.securityposture.v1.IPosture
    >
  ): Promise<
    [
      protos.google.cloud.securityposture.v1.IPosture[],
      protos.google.cloud.securityposture.v1.IListPosturesRequest | null,
      protos.google.cloud.securityposture.v1.IListPosturesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listPostures(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListPosturesRequest.
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.securityposture.v1.Posture|Posture} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listPosturesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listPosturesStream(
    request?: protos.google.cloud.securityposture.v1.IListPosturesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listPostures'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listPostures.createStream(
      this.innerApiCalls.listPostures as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listPostures`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListPosturesRequest.
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.securityposture.v1.Posture|Posture}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/security_posture.list_postures.js</caption>
   * region_tag:securityposture_v1_generated_SecurityPosture_ListPostures_async
   */
  listPosturesAsync(
    request?: protos.google.cloud.securityposture.v1.IListPosturesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.securityposture.v1.IPosture> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listPostures'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listPostures.asyncIterate(
      this.innerApiCalls['listPostures'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.securityposture.v1.IPosture>;
  }
  /**
   * Lists revisions of a Posture in a given organization and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name value for ListPostureRevisionsRequest.
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick 100 as default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.securityposture.v1.Posture|Posture}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listPostureRevisionsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listPostureRevisions(
    request?: protos.google.cloud.securityposture.v1.IListPostureRevisionsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.securityposture.v1.IPosture[],
      protos.google.cloud.securityposture.v1.IListPostureRevisionsRequest | null,
      protos.google.cloud.securityposture.v1.IListPostureRevisionsResponse,
    ]
  >;
  listPostureRevisions(
    request: protos.google.cloud.securityposture.v1.IListPostureRevisionsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.securityposture.v1.IListPostureRevisionsRequest,
      | protos.google.cloud.securityposture.v1.IListPostureRevisionsResponse
      | null
      | undefined,
      protos.google.cloud.securityposture.v1.IPosture
    >
  ): void;
  listPostureRevisions(
    request: protos.google.cloud.securityposture.v1.IListPostureRevisionsRequest,
    callback: PaginationCallback<
      protos.google.cloud.securityposture.v1.IListPostureRevisionsRequest,
      | protos.google.cloud.securityposture.v1.IListPostureRevisionsResponse
      | null
      | undefined,
      protos.google.cloud.securityposture.v1.IPosture
    >
  ): void;
  listPostureRevisions(
    request?: protos.google.cloud.securityposture.v1.IListPostureRevisionsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.securityposture.v1.IListPostureRevisionsRequest,
          | protos.google.cloud.securityposture.v1.IListPostureRevisionsResponse
          | null
          | undefined,
          protos.google.cloud.securityposture.v1.IPosture
        >,
    callback?: PaginationCallback<
      protos.google.cloud.securityposture.v1.IListPostureRevisionsRequest,
      | protos.google.cloud.securityposture.v1.IListPostureRevisionsResponse
      | null
      | undefined,
      protos.google.cloud.securityposture.v1.IPosture
    >
  ): Promise<
    [
      protos.google.cloud.securityposture.v1.IPosture[],
      protos.google.cloud.securityposture.v1.IListPostureRevisionsRequest | null,
      protos.google.cloud.securityposture.v1.IListPostureRevisionsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listPostureRevisions(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name value for ListPostureRevisionsRequest.
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick 100 as default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.securityposture.v1.Posture|Posture} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listPostureRevisionsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listPostureRevisionsStream(
    request?: protos.google.cloud.securityposture.v1.IListPostureRevisionsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    const defaultCallSettings = this._defaults['listPostureRevisions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listPostureRevisions.createStream(
      this.innerApiCalls.listPostureRevisions as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listPostureRevisions`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name value for ListPostureRevisionsRequest.
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick 100 as default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.securityposture.v1.Posture|Posture}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/security_posture.list_posture_revisions.js</caption>
   * region_tag:securityposture_v1_generated_SecurityPosture_ListPostureRevisions_async
   */
  listPostureRevisionsAsync(
    request?: protos.google.cloud.securityposture.v1.IListPostureRevisionsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.securityposture.v1.IPosture> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    const defaultCallSettings = this._defaults['listPostureRevisions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listPostureRevisions.asyncIterate(
      this.innerApiCalls['listPostureRevisions'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.securityposture.v1.IPosture>;
  }
  /**
   * PostureDeployments
   * Lists PostureDeployments in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListPostureDeploymentsRequest.
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filter to be applied on the resource, defined by EBNF grammar
   *   https://google.aip.dev/assets/misc/ebnf-filtering.txt.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.securityposture.v1.PostureDeployment|PostureDeployment}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listPostureDeploymentsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listPostureDeployments(
    request?: protos.google.cloud.securityposture.v1.IListPostureDeploymentsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.securityposture.v1.IPostureDeployment[],
      protos.google.cloud.securityposture.v1.IListPostureDeploymentsRequest | null,
      protos.google.cloud.securityposture.v1.IListPostureDeploymentsResponse,
    ]
  >;
  listPostureDeployments(
    request: protos.google.cloud.securityposture.v1.IListPostureDeploymentsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.securityposture.v1.IListPostureDeploymentsRequest,
      | protos.google.cloud.securityposture.v1.IListPostureDeploymentsResponse
      | null
      | undefined,
      protos.google.cloud.securityposture.v1.IPostureDeployment
    >
  ): void;
  listPostureDeployments(
    request: protos.google.cloud.securityposture.v1.IListPostureDeploymentsRequest,
    callback: PaginationCallback<
      protos.google.cloud.securityposture.v1.IListPostureDeploymentsRequest,
      | protos.google.cloud.securityposture.v1.IListPostureDeploymentsResponse
      | null
      | undefined,
      protos.google.cloud.securityposture.v1.IPostureDeployment
    >
  ): void;
  listPostureDeployments(
    request?: protos.google.cloud.securityposture.v1.IListPostureDeploymentsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.securityposture.v1.IListPostureDeploymentsRequest,
          | protos.google.cloud.securityposture.v1.IListPostureDeploymentsResponse
          | null
          | undefined,
          protos.google.cloud.securityposture.v1.IPostureDeployment
        >,
    callback?: PaginationCallback<
      protos.google.cloud.securityposture.v1.IListPostureDeploymentsRequest,
      | protos.google.cloud.securityposture.v1.IListPostureDeploymentsResponse
      | null
      | undefined,
      protos.google.cloud.securityposture.v1.IPostureDeployment
    >
  ): Promise<
    [
      protos.google.cloud.securityposture.v1.IPostureDeployment[],
      protos.google.cloud.securityposture.v1.IListPostureDeploymentsRequest | null,
      protos.google.cloud.securityposture.v1.IListPostureDeploymentsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listPostureDeployments(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListPostureDeploymentsRequest.
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filter to be applied on the resource, defined by EBNF grammar
   *   https://google.aip.dev/assets/misc/ebnf-filtering.txt.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.securityposture.v1.PostureDeployment|PostureDeployment} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listPostureDeploymentsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listPostureDeploymentsStream(
    request?: protos.google.cloud.securityposture.v1.IListPostureDeploymentsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listPostureDeployments'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listPostureDeployments.createStream(
      this.innerApiCalls.listPostureDeployments as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listPostureDeployments`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListPostureDeploymentsRequest.
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filter to be applied on the resource, defined by EBNF grammar
   *   https://google.aip.dev/assets/misc/ebnf-filtering.txt.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.securityposture.v1.PostureDeployment|PostureDeployment}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/security_posture.list_posture_deployments.js</caption>
   * region_tag:securityposture_v1_generated_SecurityPosture_ListPostureDeployments_async
   */
  listPostureDeploymentsAsync(
    request?: protos.google.cloud.securityposture.v1.IListPostureDeploymentsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.securityposture.v1.IPostureDeployment> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listPostureDeployments'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listPostureDeployments.asyncIterate(
      this.innerApiCalls['listPostureDeployments'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.securityposture.v1.IPostureDeployment>;
  }
  /**
   * PostureTemplates
   * Lists all the PostureTemplates available to the user.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListPostureTemplatesRequest.
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filter to be applied on the resource, defined by EBNF grammar
   *   https://google.aip.dev/assets/misc/ebnf-filtering.txt.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.securityposture.v1.PostureTemplate|PostureTemplate}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listPostureTemplatesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listPostureTemplates(
    request?: protos.google.cloud.securityposture.v1.IListPostureTemplatesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.securityposture.v1.IPostureTemplate[],
      protos.google.cloud.securityposture.v1.IListPostureTemplatesRequest | null,
      protos.google.cloud.securityposture.v1.IListPostureTemplatesResponse,
    ]
  >;
  listPostureTemplates(
    request: protos.google.cloud.securityposture.v1.IListPostureTemplatesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.securityposture.v1.IListPostureTemplatesRequest,
      | protos.google.cloud.securityposture.v1.IListPostureTemplatesResponse
      | null
      | undefined,
      protos.google.cloud.securityposture.v1.IPostureTemplate
    >
  ): void;
  listPostureTemplates(
    request: protos.google.cloud.securityposture.v1.IListPostureTemplatesRequest,
    callback: PaginationCallback<
      protos.google.cloud.securityposture.v1.IListPostureTemplatesRequest,
      | protos.google.cloud.securityposture.v1.IListPostureTemplatesResponse
      | null
      | undefined,
      protos.google.cloud.securityposture.v1.IPostureTemplate
    >
  ): void;
  listPostureTemplates(
    request?: protos.google.cloud.securityposture.v1.IListPostureTemplatesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.securityposture.v1.IListPostureTemplatesRequest,
          | protos.google.cloud.securityposture.v1.IListPostureTemplatesResponse
          | null
          | undefined,
          protos.google.cloud.securityposture.v1.IPostureTemplate
        >,
    callback?: PaginationCallback<
      protos.google.cloud.securityposture.v1.IListPostureTemplatesRequest,
      | protos.google.cloud.securityposture.v1.IListPostureTemplatesResponse
      | null
      | undefined,
      protos.google.cloud.securityposture.v1.IPostureTemplate
    >
  ): Promise<
    [
      protos.google.cloud.securityposture.v1.IPostureTemplate[],
      protos.google.cloud.securityposture.v1.IListPostureTemplatesRequest | null,
      protos.google.cloud.securityposture.v1.IListPostureTemplatesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listPostureTemplates(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListPostureTemplatesRequest.
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filter to be applied on the resource, defined by EBNF grammar
   *   https://google.aip.dev/assets/misc/ebnf-filtering.txt.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.securityposture.v1.PostureTemplate|PostureTemplate} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listPostureTemplatesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listPostureTemplatesStream(
    request?: protos.google.cloud.securityposture.v1.IListPostureTemplatesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listPostureTemplates'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listPostureTemplates.createStream(
      this.innerApiCalls.listPostureTemplates as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listPostureTemplates`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListPostureTemplatesRequest.
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filter to be applied on the resource, defined by EBNF grammar
   *   https://google.aip.dev/assets/misc/ebnf-filtering.txt.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.securityposture.v1.PostureTemplate|PostureTemplate}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/security_posture.list_posture_templates.js</caption>
   * region_tag:securityposture_v1_generated_SecurityPosture_ListPostureTemplates_async
   */
  listPostureTemplatesAsync(
    request?: protos.google.cloud.securityposture.v1.IListPostureTemplatesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.securityposture.v1.IPostureTemplate> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listPostureTemplates'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listPostureTemplates.asyncIterate(
      this.innerApiCalls['listPostureTemplates'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.securityposture.v1.IPostureTemplate>;
  }
  /**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

  /**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

  /**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   *   for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   *   {@link google.longrunning.Operation | google.longrunning.Operation}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * {@link google.longrunning.Operation | google.longrunning.Operation}.
   * The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
  cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   * for the details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified organization resource name string.
   *
   * @param {string} organization
   * @param {string} location
   * @returns {string} Resource name string.
   */
  organizationPath(organization: string, location: string) {
    return this.pathTemplates.organizationPathTemplate.render({
      organization: organization,
      location: location,
    });
  }

  /**
   * Parse the organization from Organization resource.
   *
   * @param {string} organizationName
   *   A fully-qualified path representing Organization resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationName(organizationName: string) {
    return this.pathTemplates.organizationPathTemplate.match(organizationName)
      .organization;
  }

  /**
   * Parse the location from Organization resource.
   *
   * @param {string} organizationName
   *   A fully-qualified path representing Organization resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromOrganizationName(organizationName: string) {
    return this.pathTemplates.organizationPathTemplate.match(organizationName)
      .location;
  }

  /**
   * Return a fully-qualified posture resource name string.
   *
   * @param {string} organization
   * @param {string} location
   * @param {string} posture
   * @returns {string} Resource name string.
   */
  posturePath(organization: string, location: string, posture: string) {
    return this.pathTemplates.posturePathTemplate.render({
      organization: organization,
      location: location,
      posture: posture,
    });
  }

  /**
   * Parse the organization from Posture resource.
   *
   * @param {string} postureName
   *   A fully-qualified path representing Posture resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromPostureName(postureName: string) {
    return this.pathTemplates.posturePathTemplate.match(postureName)
      .organization;
  }

  /**
   * Parse the location from Posture resource.
   *
   * @param {string} postureName
   *   A fully-qualified path representing Posture resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromPostureName(postureName: string) {
    return this.pathTemplates.posturePathTemplate.match(postureName).location;
  }

  /**
   * Parse the posture from Posture resource.
   *
   * @param {string} postureName
   *   A fully-qualified path representing Posture resource.
   * @returns {string} A string representing the posture.
   */
  matchPostureFromPostureName(postureName: string) {
    return this.pathTemplates.posturePathTemplate.match(postureName).posture;
  }

  /**
   * Return a fully-qualified postureDeployment resource name string.
   *
   * @param {string} organization
   * @param {string} location
   * @param {string} posture_deployment
   * @returns {string} Resource name string.
   */
  postureDeploymentPath(
    organization: string,
    location: string,
    postureDeployment: string
  ) {
    return this.pathTemplates.postureDeploymentPathTemplate.render({
      organization: organization,
      location: location,
      posture_deployment: postureDeployment,
    });
  }

  /**
   * Parse the organization from PostureDeployment resource.
   *
   * @param {string} postureDeploymentName
   *   A fully-qualified path representing PostureDeployment resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromPostureDeploymentName(postureDeploymentName: string) {
    return this.pathTemplates.postureDeploymentPathTemplate.match(
      postureDeploymentName
    ).organization;
  }

  /**
   * Parse the location from PostureDeployment resource.
   *
   * @param {string} postureDeploymentName
   *   A fully-qualified path representing PostureDeployment resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromPostureDeploymentName(postureDeploymentName: string) {
    return this.pathTemplates.postureDeploymentPathTemplate.match(
      postureDeploymentName
    ).location;
  }

  /**
   * Parse the posture_deployment from PostureDeployment resource.
   *
   * @param {string} postureDeploymentName
   *   A fully-qualified path representing PostureDeployment resource.
   * @returns {string} A string representing the posture_deployment.
   */
  matchPostureDeploymentFromPostureDeploymentName(
    postureDeploymentName: string
  ) {
    return this.pathTemplates.postureDeploymentPathTemplate.match(
      postureDeploymentName
    ).posture_deployment;
  }

  /**
   * Return a fully-qualified postureTemplate resource name string.
   *
   * @param {string} organization
   * @param {string} location
   * @param {string} posture_template
   * @returns {string} Resource name string.
   */
  postureTemplatePath(
    organization: string,
    location: string,
    postureTemplate: string
  ) {
    return this.pathTemplates.postureTemplatePathTemplate.render({
      organization: organization,
      location: location,
      posture_template: postureTemplate,
    });
  }

  /**
   * Parse the organization from PostureTemplate resource.
   *
   * @param {string} postureTemplateName
   *   A fully-qualified path representing PostureTemplate resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromPostureTemplateName(postureTemplateName: string) {
    return this.pathTemplates.postureTemplatePathTemplate.match(
      postureTemplateName
    ).organization;
  }

  /**
   * Parse the location from PostureTemplate resource.
   *
   * @param {string} postureTemplateName
   *   A fully-qualified path representing PostureTemplate resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromPostureTemplateName(postureTemplateName: string) {
    return this.pathTemplates.postureTemplatePathTemplate.match(
      postureTemplateName
    ).location;
  }

  /**
   * Parse the posture_template from PostureTemplate resource.
   *
   * @param {string} postureTemplateName
   *   A fully-qualified path representing PostureTemplate resource.
   * @returns {string} A string representing the posture_template.
   */
  matchPostureTemplateFromPostureTemplateName(postureTemplateName: string) {
    return this.pathTemplates.postureTemplatePathTemplate.match(
      postureTemplateName
    ).posture_template;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.securityPostureStub && !this._terminated) {
      return this.securityPostureStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.locationsClient.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
